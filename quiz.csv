#,Question,Option A,Option B,Option C,Option D,Option E,Correct Answer,Explanation,Domain,Competency
1,"What is the fundamental reason Kubernetes uses Pods as the smallest deployable unit, rather than individual containers directly?",To simplify network configuration for containers,To enable co-location and shared resources for containers,To enforce stricter security boundaries than containers,To provide a unique IP address per container,To reduce container image size,B,"Pods allow tightly coupled containers to share resources like network namespace (IP, port space) and storage volumes, facilitating communication and data sharing for helper or sidecar patterns.",Kubernetes Fundamentals,Containers
2,Which Kubernetes control plane component is responsible for persisting the cluster's desired state and configuration?,kube-scheduler,kube-apiserver,etcd,kubelet,controller-manager,C,"etcd is a distributed key-value store that reliably stores all Kubernetes cluster data, serving as the single source of truth for the cluster's state.",Kubernetes Fundamentals,Kubernetes Architecture
3,A developer needs to expose a web application running in a set of Pods within the cluster using a stable internal IP address. Which Kubernetes resource is most appropriate?,Ingress,NodePort Service,ClusterIP Service,ExternalName Service,ReplicaSet,C,"A ClusterIP Service provides a stable internal IP address and DNS name for accessing Pods, only reachable from within the cluster. NodePort exposes on nodes, Ingress is for external HTTP/S.",Kubernetes Fundamentals,Kubernetes Resources
4,What is the primary purpose of the Kubernetes API server in the control plane architecture?,To run containerized applications directly,To schedule Pods onto available worker nodes,To validate and process REST requests for API objects,To manage network traffic between Pods,To store cluster state in a time-series database,C,"The kube-apiserver is the frontend of the control plane, exposing the Kubernetes API. It processes and validates API requests, and updates the corresponding objects in etcd.",Kubernetes Fundamentals,Kubernetes API
5,"When a Pod is scheduled, what is the primary factor the kube-scheduler considers from the Pod's specification?",Container image version,restartPolicy,Resource requests and limits,serviceAccountName,labels,C,"The kube-scheduler filters nodes based on whether they can satisfy the Pod's resource requests (CPU, memory) and then ranks them based on various priority functions.",Kubernetes Fundamentals,Scheduling
6,Which component is NOT part of the Kubernetes control plane?,kube-apiserver,etcd,kube-scheduler,kube-proxy,kube-controller-manager,D,"kube-proxy runs on every node in the cluster and is responsible for maintaining network rules on nodes, enabling network communication to Pods from network sessions inside or outside of the cluster. It's a node component, not control plane.",Kubernetes Fundamentals,Kubernetes Architecture
7,"What core benefit does containerization (e.g. using Docker or containerd) provide for application deployment?",Automatic scaling of applications,Abstraction of the underlying operating system and kernel,Consistent runtime environment across different machines,Built-in service discovery and load balancing,Secure by default inter-container communication,C,"Containers bundle an application with its dependencies, ensuring it runs consistently regardless of the host environment, solving ""it works on my machine"" problems.",Kubernetes Fundamentals,Containers
8,"What is the main advantage of using a declarative approach (e.g. YAML manifests) to manage Kubernetes resources?",It allows for more complex scripting logic,It enables direct manipulation of etcd data,"It focuses on what desired state, not how to achieve it",It provides faster API response times,It simplifies single-container Pod deployments only,C,"Declarative configurations define the desired state, and Kubernetes controllers work to reconcile the current state to this desired state. This is more robust and idempotent than imperative commands.",Kubernetes Fundamentals,Kubernetes API
9,Why is container orchestration essential for managing microservices at scale?,It simplifies writing microservice code,It automatically converts monolithic apps to microservices,"It handles service discovery, scaling, and fault tolerance",It provides a centralized logging solution by default,It guarantees zero-downtime deployments,C,"Orchestrators like Kubernetes automate complex tasks like service discovery, load balancing, scaling based on demand, and self-healing, which are crucial for managing a distributed microservices architecture.",Container Orchestration,Container Orchestration Fundamentals
10,Which part of the Container Runtime Interface (CRI) specification is containerd primarily responsible for implementing?,Image distribution and storage,Low-level container execution and lifecycle management,Network namespace creation and IP address assignment,Defining container image format standards,Implementing pod-level resource sharing,B,"containerd is a core container runtime that manages the complete container lifecycle on a single host â€“ image transfer, storage, container execution, supervision, and network attachments.",Container Orchestration,Runtime
11,"In Kubernetes, what is the primary role of Role-Based Access Control (RBAC)?",To define network traffic flow between Pods,To manage secure storage of sensitive data like passwords,To control user and service account access to API resources,To assign static IP addresses to Services,To encrypt container images at rest,C,"RBAC regulates access to Kubernetes API resources based on the roles of individual users or service accounts within the cluster, ensuring users only perform actions they are authorized for.",Container Orchestration,Security
12,What is the function of a NetworkPolicy in Kubernetes?,To provide a stable DNS name for a set of Pods,To manage external access to services via HTTP/S routing,To define how Pods are allowed to communicate with each other,To assign IP addresses to newly created Pods,To encrypt traffic between services in a mesh,C,"NetworkPolicy resources specify how groups of Pods are allowed to communicate with each other and other network endpoints, acting as a firewall at the Pod level.",Container Orchestration,Networking
13,What fundamental problem does a Service Mesh like Istio or Linkerd aim to solve in a microservices architecture?,Simplifying container image building,Automating infrastructure provisioning,Managing and observing inter-service communication,Providing persistent storage for stateful applications,Abstracting server management,C,"Service meshes provide a dedicated infrastructure layer for handling service-to-service communication, offering features 1  like traffic management, security (mTLS), and observability (metrics, traces) without requiring changes to application code.",Container Orchestration,Service Mesh
14,A stateful application requires storage that persists even if its Pod is rescheduled to another Node. Which Kubernetes objects are essential for this?,ConfigMap and Secret,PersistentVolume (PV) and PersistentVolumeClaim (PVC),EphemeralVolume and HostPath volume,Service and EndpointSlice,Job and CronJob,B,"A PersistentVolume (PV) represents a piece of storage, and a PersistentVolumeClaim (PVC) is a request for that storage by a user/Pod. This decoupling allows storage to outlive Pods.",Container Orchestration,Storage
15,Which security mechanism in Kubernetes is best suited for providing an identity to processes running in Pods to interact with the API server?,NetworkPolicy,SecurityContext,ServiceAccount,PodSecurityPolicy (deprecated) / PodSecurityAdmission,TLS Certificates for etcd,C,"ServiceAccounts provide an identity for processes that run in a Pod, which can then be granted permissions to API resources via RBAC Roles and RoleBindings.",Container Orchestration,Security
16,What is the primary goal of Horizontal Pod Autoscaling (HPA) in Kubernetes?,To increase the resource limits of existing Pods,To adjust the number of Pod replicas based on metrics,To add or remove Nodes from the cluster,To automatically update container images,To manage storage capacity for stateful sets,B,"HPA automatically scales the number of Pod replicas in a workload resource (like a Deployment or StatefulSet) up or down based on observed CPU utilization, custom metricsor external metrics.",Cloud Native Architecture,Autoscaling
17,"How does Serverless (e.g. FaaS like AWS Lambda or Knative Serving) primarily differ from traditional PaaS offerings?",Serverless does not use containers,Serverless applications cannot be stateful,Serverless abstracts away all underlying server management,PaaS does not offer auto-scaling capabilities,Serverless is only for event-driven functions,C,"Serverless computing (especially FaaS) aims to abstract away all infrastructure management, including servers, OS, and runtimes, allowing developers to focus solely on writing code that executes in response to events.",Cloud Native Architecture,Serverless
18,What is the primary role of the Cloud Native Computing Foundation (CNCF) in the Kubernetes ecosystem?,To directly employ Kubernetes core developers,To sell Kubernetes enterprise support subscriptions,To foster and sustain an ecosystem of open source projects,To define mandatory cloud provider APIs,To own the intellectual property of Linux,C,"The CNCF hosts and promotes a wide range of open source projects (including Kubernetes, Prometheus, Envoy) to advance cloud native computing, providing governance, support, and community building.",Cloud Native Architecture,Community and Governance
19,"In a typical cloud native environment, which persona is most concerned with ensuring application uptime, performance, and managing incident response?",Application Developer,Platform Consumer,Site Reliability Engineer (SRE) / Platform Operator,Business Analyst,End User,C,"SREs and Platform Operators are responsible for the reliability, scalability, and overall operational health of the platform and the applications running on it, including monitoring, alerting, and incident management.",Cloud Native Architecture,Roles and Personas
20,"Why are Open Standards, like those defined by the Open Container Initiative (OCI), critical for the cloud native ecosystem?",They guarantee better application performance,They enforce specific vendor implementations,They promote interoperability and prevent vendor lock-in,They reduce the need for security patching,They simplify the user interface of cloud platforms,C,"Open standards (e.g. OCI for container formats/runtimes, CNI for networking, CRI for runtimes) ensure that different tools and platforms can work together seamlessly, giving users choice and preventing vendor lock-in.",Cloud Native Architecture,Open Standards
21,Which type of telemetry data is most suitable for understanding the sequence of operations and latency across multiple microservices for a single user request?,Logs,Metrics,Traces (Distributed Tracing),Events,Alerts,C,"Distributed tracing captures the end-to-end flow of a request as it propagates through different services, providing insights into latency bottlenecks and dependencies.",Cloud Native Observability,Telemetry & Observability
22,Prometheus is primarily designed for which type of observability data?,Distributed tracing,Log aggregation and analysis,Time-series metrics collection and alerting,Security auditing and compliance reporting,Real-time user monitoring (RUM),C,"Prometheus excels at collecting, storing, and querying time-series data (metrics) from various targets, and it includes a powerful alerting mechanism based on PromQL.",Cloud Native Observability,Prometheus
23,"In Prometheus, what is an ""exporter""?",A component that sends alerts to notification channels,A database that stores long-term metric data,A client library for instrumenting application code,A piece of software that exposes metrics from third-party systems,A dashboard for visualizing metrics,D,"Exporters are helper services that fetch metrics from systems that don't natively expose them in Prometheus format (e.g. databases, hardware, message queues) and translate them into a format Prometheus can scrape.",Cloud Native Observability,Prometheus
24,What is a key challenge in cost management specifically related to shared Kubernetes clusters?,High cost of Kubernetes control plane components,Difficulty in attributing resource usage to specific teams/apps,Inability to use reserved instances with Kubernetes,Lack of tools for visualizing overall cloud spend,Fixed pricing models for all Kubernetes services,B,"In multi-tenant clusters, accurately tracking and attributing resource consumption (CPU, memory, storage, network) to different applications, teamsor cost centers can be complex due to the shared nature of resources.",Cloud Native Observability,Cost Management
25,Which principle is central to the GitOps methodology for application and infrastructure deployment?,Using imperative scripts stored in Git,Managing only stateless applications via Git,Treating Git as the single source of truth for desired state,Requiring manual approval for all Git commits,Using Git LFS for storing container images,C,"GitOps emphasizes a declarative approach where the entire desired state of the system (applications, infrastructure) is described in Git, and an automated process ensures the live environment converges to this state.",Cloud Native Application Delivery,GitOps
26,"In a CI/CD pipeline for a cloud native application, what is the typical output of the ""Continuous Integration"" (CI) phase?",A running application in production,A new Kubernetes cluster provisioned,A tested and versioned container image/artifact,A detailed cost analysis report,A set of user stories for the next sprint,C,"The CI phase focuses on building the application, running automated tests, and producing a reliable, versioned artifact (often a container image) that is ready for deployment.",Cloud Native Application Delivery,CI/CD
27,What is the primary benefit of implementing CI/CD pipelines for application delivery?,It eliminates the need for testing,It reduces infrastructure costs significantly,"It enables faster, more reliable software releases",It automatically writes application code,It replaces the need for version control systems,C,"CI/CD automates the build, test, and deployment processes, leading to increased release velocity, improved code quality through automated testing, and more consistent deployments.",Cloud Native Application Delivery,Application Delivery Fundamentals
28,What does a ReplicaSet ensure in Kubernetes?,That a Pod runs on every node,That a certain number of Pod replicas are running,That Pods have stable network identifiers,That external traffic can reach the Pods,That Pods are scheduled according to affinity rules,B,"A ReplicaSet's primary purpose is to maintain a stable set of replica Pods running at any given time, ensuring the desired number of instances of an application are available. Deployments manage ReplicaSets.",Kubernetes Fundamentals,Kubernetes Resources
29,Which of the following is NOT a core characteristic of cloud native architectures?,Microservices,Containers,Monolithic application design,DevOps practices,Automation,C,"Cloud native architectures typically favor microservices, containers, dynamic orchestration (like Kubernetes), and DevOps/Agile practices, moving away from large, tightly coupled monolithic designs.",Cloud Native Architecture,Cloud Native Principles (implied)
30,What is the main purpose of a ServiceAccount in Kubernetes when interacting with the API server?,To define network access policies for Pods,To provide an identity for Pods to authenticate to the API,To store sensitive credentials for applications,To group users for applying permissions,To manage DNS records for services,B,"ServiceAccounts provide an identity for processes running within Pods. This identity can be used to authenticate to the Kubernetes API server, and RBAC rules can grant it specific permissions.",Container Orchestration,Security
31,"If you need to run a batch job that completes and then terminates, which Kubernetes workload resource is most suitable?",Deployment,StatefulSet,DaemonSet,Job,Service,D,"A Job creates one or more Pods and ensures that a specified number of them successfully terminate. It's ideal for batch tasks, while CronJob is for scheduled Jobs.",Kubernetes Fundamentals,Kubernetes Resources
32,"Which of the following best describes the concept of ""desired state"" in Kubernetes?",The current operational status of cluster nodes,The configuration specified by the user for their resources,The real-time metrics collected by Prometheus,The log output generated by running containers,The network policies applied to Pods,B,"Users define the desired state of their applications and infrastructure via Kubernetes API objects (e.g. in YAML files). Kubernetes controllers then continuously work to make the actual state of the cluster match this desired state.",Kubernetes Fundamentals,Kubernetes Architecture
33,Which OCI specification defines the format of a container image?,Runtime Specification,Image Specification,Distribution Specification,Network Specification,Storage Specification,B,"The OCI Image Specification defines how to create and package a container image, ensuring interoperability across different container tools and runtimes that adhere to the standard.",Kubernetes Fundamentals,Containers
34,What is a key difference between kubectl apply -f <filename> and kubectl create -f <filename>?,"apply is declarative, create is imperative","create can update existing resources, apply cannot","apply ignores existing resources, create fails if they exist","apply stores last-applied-configuration, create does not","create is idempotent, apply is not",D,"kubectl apply records the applied configuration in an annotation on the resource. This allows it to calculate a patch between the previous, current, and new desired state, making it suitable for declarative updates. create will fail if the resource exists.",Kubernetes Fundamentals,Kubernetes API
35,"In the context of container security, what does ""least privilege"" primarily refer to?",Running containers with minimal resource requests,Granting containers only the permissions they absolutely need,Using the smallest possible base container images,Limiting network access to containers,Encrypting all data within the container,B,"The principle of least privilege means that containers (and their processes) should run with only the capabilities and permissions essential for their function, reducing the potential impact of a compromise.",Container Orchestration,Security
36,What is the primary function of kube-proxy when a Service of type ClusterIP is created?,It assigns an IP address from the cluster's Pod CIDR.,It modifies iptables or IPVS rules on nodes to route traffic.,It creates a DNS A record for the Service.,It terminates TLS connections for the Service.,It exposes the Service on a port on each Node.,B,"kube-proxy watches the API server for new Services and Endpoints. For ClusterIP Services, it configures network rules (e.g. iptables, IPVS) on each node to capture traffic destined for the Service's IP and load balance it to the backend Pods.",Container Orchestration,Networking
37,What core benefit does a StatefulSet provide over a Deployment for applications like databases?,Automatic rolling updates by default,Simpler YAML configuration for Pod templates,"Stable, unique network identifiers and persistent storage",Support for hostNetwork: true,Higher number of allowed replicas,C,"StatefulSets are designed for stateful applications, providing stable, persistent identifiers (e.g. my-app-0, my-app-1) and per-instance persistent storage that follows the Pod identity.",Kubernetes Fundamentals,Kubernetes Resources
38,"What is the primary role of the ""Controller Manager"" in Kubernetes?",Manages user authentication and authorization,Exposes the Kubernetes API to external clients,Runs various controllers that regulate cluster state,Schedules Pods onto appropriate Nodes,Stores all cluster configuration data,C,"The kube-controller-manager runs multiple controller processes (e.g. Node controller, Replication controller, Endpoints controller) that watch for changes and work to drive the actual cluster state towards the desired state.",Kubernetes Fundamentals,Kubernetes Architecture
39,What is a primary characteristic of Vertical Pod Autoscaling (VPA)?,It adjusts the number of Pod replicas.,It adjusts the CPU and memory requests and limits for Pods.,It adds or removes Nodes from the cluster.,It automatically selects the optimal storage class.,It scales the number of available IP addresses.,B,"VPA recommends or automatically updates the resource requests and limits for containers within Pods to match actual usage, helping to optimize resource allocation. It does not change the number of replicas (that's HPA).",Cloud Native Architecture,Autoscaling
40,"Which statement accurately describes a key aspect of ""observability"" in cloud native systems?",It is solely focused on collecting system logs.,It primarily relies on manual health checks by operators.,It enables understanding a system's internal state from its outputs.,It is achieved by using proprietary monitoring tools.,It is only relevant for production environments.,C,"Observability is the ability to infer the internal state and behavior of a complex system by examining its outputs (logs, metrics, traces). This allows for better troubleshooting, understanding performance, and proactive issue detection.",Cloud Native Observability,Telemetry & Observability
41,"In Prometheus, what does the up metric typically indicate for a scraped target?",The version number of the target application.,The number of active user connections to the target.,Whether Prometheus was able to successfully scrape the target.,The CPU utilization of the target.,The total uptime of the target since it started.,C,"The up{job=""<job_name>"", instance=""<instance_id>""} metric is automatically generated by Prometheus. A value of 1 means the scrape was successful; 0 means it failed. This is fundamental for monitoring target health.",Cloud Native Observability,Prometheus
42,"From a FinOps perspective in a Kubernetes environment, why is tagging resources (e.g. with labels) important?",It improves the scheduling efficiency of Pods.,It enables more accurate cost allocation and showback/chargeback.,It automatically secures inter-Pod communication.,It increases the performance of PersistentVolumes.,It simplifies the process of upgrading Kubernetes.,B,"Labels and annotations applied to Kubernetes resources (Namespaces, Deployments, Pods, etc.) can be used by cost management tools to categorize and attribute costs to different teams, projectsor applications, supporting FinOps practices.",Cloud Native Observability,Cost Management
43,What is a key advantage of using GitOps for managing Kubernetes deployments compared to traditional CI/CD push-based deployments?,GitOps pipelines are significantly faster to execute.,GitOps eliminates the need for container registries.,GitOps enhances security by reducing direct cluster access for CI.,GitOps does not require YAML manifests for resources.,GitOps is only suitable for small-scale deployments.,C,"In GitOps, the CI system typically pushes an image to a registry and updates a Git repo. An agent inside the cluster pulls changes from Git, reducing the CI system's need for direct cluster credentials and providing a stronger security posture.",Cloud Native Application Delivery,GitOps
44,"Which of these is a core component of a ""Continuous Delivery"" pipeline but NOT necessarily ""Continuous Deployment""?",Automated building of code into an artifact.,Automated execution of unit and integration tests.,Automated deployment to a staging/QA environment.,Automated deployment to the production environment.,Manual approval gate before production deployment.,E,"Continuous Delivery ensures every validated change is releasable to production, often with a manual approval step. Continuous Deployment automates the release to production without manual intervention if all prior stages pass. Both include A, B, C.",Cloud Native Application Delivery,CI/CD
45,"What Kubernetes feature allows you to define constraints on which Nodes your Pods can run, based on Node labels?",NetworkPolicy,ResourceQuota,nodeSelector / nodeAffinity,PodDisruptionBudget,LimitRange,C,"nodeSelector provides a simple way to constrain Pods to Nodes with specific labels. nodeAffinity offers more expressive rules, including ""preferred"" and ""required"" constraints.",Kubernetes Fundamentals,Scheduling
46,"Which of these is a primary goal of the CNCF's ""Trail Map"" for cloud native adoption?",To mandate specific vendor products for each stage.,To provide a prescriptive path for building cloud native apps.,To offer a recommended journey and project choices for adopters.,To rank cloud providers based on their Kubernetes offerings.,To certify individual developers as cloud native experts.,C,"The CNCF Trail Map suggests a path for organizations adopting cloud native technologies, highlighting CNCF projects that can help at different stages (e.g. containerization, CI/CDorchestration, observability).",Cloud Native Architecture,Community and Governance
47,"What is the primary motivation behind using ""Serverless Functions"" (FaaS)?",To achieve higher compute density on physical servers.,"To run long-lived, stateful batch processing jobs.",To execute event-driven code without managing infrastructure.,To gain fine-grained control over OS-level configurations.,"To build complex, monolithic application backends.",C,"Serverless functions are designed for short-lived, event-driven computations where the underlying infrastructure (servers, OS) is completely managed by the platform, allowing developers to focus on code.",Cloud Native Architecture,Serverless
48,"What is the role of an ""Ingress Controller"" in a Kubernetes cluster?",It assigns IP addresses to Pods.,It manages storage volumes for stateful applications.,It implements the rules defined in Ingress resources.,It monitors the health of Nodes in the cluster.,It encrypts communication between control plane components.,C,"An Ingress resource defines HTTP/S routing rules, but an Ingress Controller (e.g. Nginx, Traefik) is the actual reverse proxy/load balancer that reads these rules and routes external traffic accordingly.",Container Orchestration,Networking
49,"When instrumenting an application for Prometheus, what is the typical way metrics are exposed by the application?",Writing metrics directly to Prometheus's storage.,Pushing metrics to a Prometheus Pushgateway.,"Exposing an HTTP endpoint (e.g. /metrics) for scraping.",Sending metrics via syslog to a collector.,Using SNMP traps to send metric data.,C,Applications instrumented with Prometheus client libraries typically expose their metrics on an HTTP endpoint (commonly /metrics) in a specific format that Prometheus can then periodically scrape.,Cloud Native Observability,Prometheus
50,"What is the core difference between ""authentication"" and ""authorization"" in Kubernetes security?","Authentication is for users, authorization for service accounts.","Authentication verifies identity, authorization verifies permissions.",Authorization happens before authentication in the API request flow.,"Authentication uses Roles, authorization uses RoleBindings.","Authorization uses client certificates, authentication uses tokens.",B,"Authentication is the process of determining who a user or service is. Authorization is the process of determining what an authenticated user or service is allowed to do (i.e., which API resources they can access and what actions they can perform).",Container Orchestration,Security
51,What is the smallest and simplest deployable unit object created and managed by Kubernetes?,Node,Container,Pod,Deployment,,C,A Pod represents a single instance of a running process in a cluster and can contain one or more containers. Nodes host Pods.,Kubernetes Fundamentals,Kubernetes Resources
52,Which Kubernetes component is responsible for watching for newly created Pods and assigning them to Nodes?,kube-apiserver,etcd,kube-scheduler,kubelet,,C,The kube-scheduler is the control plane component that decides which Node a Pod should run on based on constraints and availability.,Kubernetes Fundamentals,Kubernetes Architecture
53,What is the primary function of the kubelet component?,Storing cluster state,Scheduling Pods onto Nodes,Managing the container runtime,Exposing the Kubernetes API,,C,The kubelet runs on each Node and ensures that containers described in PodSpecs are running and healthy. It interacts with the container runtime.,Kubernetes Fundamentals,Kubernetes Architecture
54,Which component acts as the central control plane and exposes the Kubernetes API?,kube-proxy,kube-apiserver,etcd,controller-manager,,B,"The kube-apiserver validates and configures data for API objects (Pods, Services, etc.) and is the frontend for the control plane.",Kubernetes Fundamentals,Kubernetes API
55,What is the primary role of etcd in a Kubernetes cluster?,Running application containers,Scheduling workloads,Storing the cluster state,Managing network policies,,C,etcd is a consistent and highly-available key-value store used as Kubernetes' backing store for all cluster data.,Kubernetes 1  Fundamentals,Kubernetes Architecture
56,Which Kubernetes resource is typically used to manage stateless applications by ensuring a specified number of Pod replicas are running?,StatefulSet,DaemonSet,Deployment,Job,,C,"Deployments manage ReplicaSets, providing declarative updates and scaling for stateless applications.",Kubernetes Fundamentals,Kubernetes Resources
57,"What type of software package bundles application code with all its dependencies, libraries, and configuration files?",Virtual Machine,Container,Operating System,Serverless Function,,B,"Containers package application code and dependencies together, isolating them from the underlying infrastructure.",Kubernetes Fundamentals,Containers
58,"In Kubernetes, what is the process of assigning Pods to Nodes called?",Replication,Orchestration,Scheduling,Deployment,,C,"Scheduling is the core function of the kube-scheduler, selecting appropriate Nodes for Pods based on resource requests and other factors.",Kubernetes Fundamentals,Scheduling
59,What is the main benefit of using container orchestration systems like Kubernetes?,Simplifying code writing,Automating deployment & scaling,Reducing storage costs,Improving network latency,,B,"Orchestrators automate the deployment, scaling, management, and networking of containerized applications.",Container Orchestration,Container Orchestration Fundamentals
60,Which of these is a standard specified by the OCI (Open Container Initiative)?,Docker,Kubernetes,Image Specification,Istio,,C,The OCI defines standards for container image formats (Image Specification) and runtime (Runtime Specification).,Kubernetes Fundamentals,Containers
61,Which container runtime is most commonly associated with Kubernetes and implements the CRI (Container Runtime Interface)?,Docker (dockershim),containerd,rkt,LXC,,B,"containerd is a widely used container runtime focused on simplicity, robustness, and portability, fully implementing the CRI.",Container Orchestration,Runtime
62,What Kubernetes object provides a stable IP address and DNS name for accessing a set of Pods?,Ingress,Service,EndpointSlice,NetworkPolicy,,B,"A Service defines a logical set of Pods and a policy by which to access them, providing load balancing and service discovery.",Container Orchestration,Networking
63,How can you securely store sensitive information like passwords or API keys in Kubernetes?,ConfigMap,Annotation,Label,Secret,,D,Secrets are Kubernetes objects specifically designed to hold small amounts of sensitive data.,Container Orchestration,Security
64,What is the role of a CNI (Container Network Interface) plugin in Kubernetes?,Managing storage volumes,Providing container networking,Scheduling Pods,Securing the API server,,B,CNI plugins are responsible for configuring network interfaces for containers and managing IP address allocation within the cluster.,Container Orchestration,Networking
65,Which Kubernetes object defines rules about how Pods are allowed to communicate with each other and network endpoints?,Service,Ingress,NetworkPolicy,SecurityContext,,C,NetworkPolicies allow specifying traffic flow rules at the IP address or port level (OSI layer 3 or 4).,Container Orchestration,Networking
66,What is the primary purpose of a Service Mesh like Istio or Linkerd?,Container image building,Cluster storage management,Managing inter-service comms,Node provisioning,,C,"Service meshes add observability, security, and reliability features to communication between microservices (service-to-service).",Container Orchestration,Service Mesh
67,"What Kubernetes object represents a piece of storage in the cluster, provisioned by an administrator or dynamically?",PersistentVolumeClaim (PVC),StorageClass,PersistentVolume (PV),Volume,,C,"A PersistentVolume (PV) is a piece of storage provisioned for use in the cluster, independent of any individual Pod.",Container Orchestration,Storage
68,What does a PersistentVolumeClaim (PVC) represent in Kubernetes?,A request for storage by a user,A type of storage backend,A node's local storage,A backup of a volume,,A,A PVC is a request made by a user (or Pod) for storage resources defined by a PV.,Container Orchestration,Storage
69,What is the function of a StorageClass in Kubernetes?,To define types of storage,To claim a specific PV,To attach storage to a Pod,To backup volume data,,A,"StorageClasses allow administrators to define different ""classes"" of storage (e.g. 'fast-ssd', 'cheap-hdd') for dynamic provisioning.",Container Orchestration,Storage
70,Which mechanism allows Kubernetes to automatically adjust the number of Pods in a Deployment based on CPU utilization or custom metrics?,Vertical Pod Autoscaler (VPA),Cluster Autoscaler (CA),Horizontal Pod Autoscaler (HPA),Node Problem Detector (NPD),,C,The HPA automatically scales the number of Pod replicas based on observed metrics like CPU or memory usage.,Cloud Native Architecture,Autoscaling
71,What is the primary goal of the Cluster Autoscaler?,Scale Pod replicas,Scale cluster Nodes,Scale Persistent Volumes,Scale Service endpoints,,B,The Cluster Autoscaler adjusts the number of Nodes in the cluster based on pending Pods that cannot be scheduled due to resource limits.,Cloud Native Architecture,Autoscaling
72,"What term describes an architectural approach where applications are built as small, independent services that run in their own processes?",Monolithic,Microservices,Serverless,N-Tier,,B,"Microservices architecture structures an application as a collection of loosely coupled, independently deployable services.",Cloud Native Architecture,Cloud Native Principles
73,"What does ""Serverless"" computing primarily abstract away from the developer?",Networking,Storage,Server Management,Operating System choice,,C,"Serverless platforms (like FaaS) manage the underlying infrastructure, allowing developers to focus solely on code execution.",Cloud Native Architecture,Serverless
74,Which organization hosts Kubernetes and promotes the growth of the cloud native ecosystem?,Linux Foundation (LF),Apache Software Foundation (ASF),Cloud Native Computing Foundation (CNCF),Open Source Initiative (OSI),,C,"The CNCF, part of the Linux Foundation, stewards Kubernetes and many other cloud native projects.",Cloud Native Architecture,Community and Governance
75,What is the benefit of using open standards in cloud native technologies?,Vendor lock-in,Increased complexity,Interoperability & Portability,Reduced security,,C,"Open standards (like OCI, CRI, CNI) ensure that different tools and platforms can work together, preventing vendor lock-in.",Cloud Native Architecture,Open Standards
76,"In a typical cloud native environment, which persona is primarily responsible for designing and building the application?",Operator,Developer,Site Reliability Engineer (SRE),Security Engineer,,B,"Developers focus on writing, building, and testing the application code that runs within the cloud native platform.",Cloud Native Architecture,Roles and Personas
77,"Which persona is typically focused on the reliability, scalability, and maintenance of the underlying Kubernetes platform?",End User,Application Developer,Platform Operator / SRE,Data Scientist,,C,"Operators or SREs manage the Kubernetes cluster itself, ensuring it's healthy, scalable, and available for developers.",Cloud Native Architecture,Roles and Personas
78,What are the three pillars of observability in cloud native systems?,"Alerts, Dashboards, Reports","Logs, Metrics, Traces","Monitoring, Logging, Profiling","Scaling, Scheduling, Storing",,B,"Logs (events), Metrics (measurements over time), and Traces (request flows) are considered the fundamental pillars of observability.",Cloud Native Observability,Telemetry & Observability
79,What type of telemetry data records discrete events that happened at a specific time?,Metrics,Traces,Logs,Profiles,,C,"Logs provide timestamped records of events, often used for debugging or auditing.",Cloud Native Observability,Telemetry & Observability
80,"What type of telemetry data represents a measurement sampled over time, often aggregated?",Metrics,Traces,Logs,Events,,A,"Metrics are numerical values tracked over time (e.g. CPU usage, request count) used for monitoring trends and performance.",Cloud Native Observability,Telemetry & Observability
81,What type of telemetry data shows the path and duration of a request as it flows through multiple services?,Metrics,Traces,Logs,Alerts,,B,"Traces (specifically distributed traces) track a request's journey across different microservices, identifying bottlenecks.",Cloud Native Observability,Telemetry & Observability
82,"Which open-source monitoring system, graduated by the CNCF, is widely used for collecting and querying time-series metrics in Kubernetes?",Grafana,Jaeger,Prometheus,Fluentd,,C,Prometheus is the de facto standard for metrics collection and alerting in the Kubernetes ecosystem.,Cloud Native Observability,Prometheus
83,How does Prometheus typically gather metrics from applications and infrastructure?,Pushing metrics to endpoints,Pulling metrics via scraping,Reading log files directly,Using kernel probes,,B,"Prometheus operates on a pull model, periodically scraping HTTP endpoints exposed by targets (applications, exporters) for metrics.",Cloud Native Observability,Prometheus
84,What language is used to write queries in Prometheus?,SQL,PromQL,JSONPath,YAML,,B,PromQL (Prometheus Query Language) is the powerful functional query language used to select and aggregate time series data.,Cloud Native Observability,Prometheus
85,"In cloud native cost management, what does ""FinOps"" primarily focus on?",Optimizing application code,Managing cloud spending,Improving network security,Automating deployments,,B,FinOps is a cultural practice and framework that brings financial accountability to the variable spend model of the cloud.,Cloud Native Observability,Cost Management
86,Why can cost management be challenging in Kubernetes environments?,Lack of monitoring tools,Shared resources & dynamic workloads,Fixed infrastructure costs,Infrequent deployments,,B,The shared nature of cluster resources and the dynamic scaling of workloads make it difficult to attribute costs accurately.,Cloud Native Observability,Cost Management
87,What is the practice of using Git repositories as the single source of truth for defining and managing infrastructure and applications?,CI/CD,DevOps,GitOps,Infrastructure as Code (IaC),,C,"GitOps leverages Git's features (versioning, history, PRs) to manage infrastructure and application deployment declaratively.",Cloud Native Application Delivery,GitOps
88,Which core principle differentiates GitOps from general Infrastructure as Code (IaC)?,Using code for infra config,Automating infrastructure tests,Using Git as the source of truth,Manual deployment approval,,C,"While IaC uses code, GitOps specifically mandates Git as the declarative source of truth and uses agents to enforce that state.",Cloud Native Application Delivery,GitOps
89,"What does ""CI"" stand for in the context of application delivery?",Continuous Integration,Cluster Infrastructure,Container Interface,Cloud Instance,,A,"Continuous Integration involves frequently merging code changes into a central repository, followed by automated builds and tests.",Cloud Native Application Delivery,CI/CD
90,"What does ""CD"" stand for in CI/CD?",Container Deployment,Continuous Delivery/Deployment,Cluster Discovery,Centralized Dashboard,,B,"Continuous Delivery ensures code changes can be released quickly, while Continuous Deployment automatically deploys them to production.",Cloud Native Application Delivery,CI/CD
91,Which stage in a typical CI/CD pipeline for Kubernetes usually involves creating a container image?,Testing,Building,Deployment,Monitoring,,B,"The build stage compiles code (if necessary) and packages the application and its dependencies into a container image (e.g. Docker).",Cloud Native Application Delivery,CI/CD
92,"Which tool is commonly used in CI/CD pipelines to automate the build, test, and deployment processes?",Kubernetes,Docker,Jenkins / GitLab CI / GitHub Actions,Prometheus,,C,"Tools like Jenkins, GitLab CI, GitHub Actions, Argo CD, Flux etc.orchestrate the steps within a CI/CD pipeline.",Cloud Native Application Delivery,CI/CD
93,What is the primary goal of Application Delivery in a cloud native context?,To secure the cluster,To monitor resource usage,To reliably deploy & manage apps,To provision infrastructure,,C,Application delivery focuses on the processes and tools used to get applications running reliably and efficiently in the environment.,Cloud Native Application Delivery,Application Delivery Fundamentals
94,"In Kubernetes RBAC (Role-Based Access Control), what defines a set of permissions?",Role / ClusterRole,ServiceAccount,RoleBinding / ClusterRoleBinding,User,,A,A Role (namespace-scoped) or ClusterRole (cluster-scoped) contains rules that represent a set of permissions on resources.,Container Orchestration,Security
95,"What object binds a Role or ClusterRole to a user, groupor ServiceAccount?",Secret,ConfigMap,NetworkPolicy,RoleBinding / ClusterRoleBinding,,D,A RoleBinding (namespace-scoped) or ClusterRoleBinding (cluster-scoped) grants the permissions defined in a Role/ClusterRole to subjects.,Container Orchestration,Security
96,"If you need a Pod to run on every single Node in the cluster (or a subset), which controller is most suitable?",Deployment,StatefulSet,DaemonSet,Job,,C,"DaemonSets ensure that all (or some) Nodes run a copy of a Pod, useful for cluster services like log collectors or node monitors.",Kubernetes Fundamentals,Kubernetes Resources
97,What is a primary difference between a Deployment and a StatefulSet?,StatefulSets manage Pods,Deployments are for databases,StatefulSets provide stable IDs,Deployments use PVs,,C,"StatefulSets provide guarantees about the ordering and uniqueness of Pods, including stable network identifiers and persistent storage.",Kubernetes Fundamentals,Kubernetes Resources
98,"Which Kubernetes API object is used to manage external access to services in a cluster, typically HTTP/S?",Service (LoadBalancer type),NodePort Service,Ingress,ExternalName Service,,C,Ingress provides HTTP/S routing rules to manage external users' access to services within the cluster based on hostnames or paths.,Container Orchestration,Networking
99,What design pattern involves running an additional container within a Pod to provide auxiliary functions (like logging or monitoring) to the main application container?,Init Container,Sidecar Container,Ephemeral Container,Job Container,,B,The Sidecar pattern adds helper containers alongside the main application container within the same Pod network/storage namespace.,Kubernetes Fundamentals,Containers
100,What fundamental concept allows Kubernetes to maintain the desired state declared by the user?,Imperative Commands,Control Loop / Reconciliation,Manual Scaling,Direct Node Access,,B,"Kubernetes controllers operate on control loops, constantly comparing the desired state (from API objects) with the actual cluster state.",Kubernetes Fundamentals,Kubernetes Architecture
"101","What is the primary benefit of `Node Affinity` (soft or hard) over `nodeSelector` in Kubernetes scheduling?","It allows for more expressive and complex scheduling rules, including preference or anti-affinity.","It is simpler to configure for basic use cases.","It forces Pods to specific nodes, without any flexibility.","It is only used for stateful applications.","It ensures even distribution of Pods across all nodes.","A","`Node Affinity` provides a more powerful and flexible way to express rules for Pod scheduling onto nodes based on node labels, including ""required"" rules (must match) and ""preferred"" rules (try to match).","Kubernetes Fundamentals","Scheduling"
"102","What does `etcd`'s role in supporting Kubernetes' desired state management?","It executes the Pods.","It functions as the highly available backing store for all cluster data, allowing controllers to reliably reconcile actual state to desired state.","It provides network connectivity between Pods.","It performs health checks on nodes.","It logs all API requests.","B","etcd is a critical component for Kubernetes' declarative model, reliably storing the desired state of all resources. Controllers continuously watch etcd for changes and work to converge the cluster's actual state to the desired state.","Kubernetes Fundamentals","Kubernetes Architecture"
"103","Which component ensures that a Pod receives a unique IP address within the cluster's Pod network?","kube-proxy","kube-apiserver","CNI Plugin","kubelet","etcd","C","The CNI (Container Network Interface) plugin (e.g., Calico, Flannel) is responsible for allocating IP addresses to Pods and configuring the network interfaces to enable Pod-to-Pod communication.","Container Orchestration","Networking"
"104","What is the primary benefit of `ServiceAccounts` in Kubernetes security?","They provide a human user identity for cluster administrators.","They provide an identity for processes running in Pods to authenticate and authorize against the Kubernetes API.","They manage external DNS records for services.","They are used for authenticating to private container registries.","They encrypt data at rest within persistent volumes.","B","ServiceAccounts provide an identity for processes running in Pods, allowing them to make API calls to the Kubernetes control plane with specific permissions granted via RBAC.","Container Orchestration","Security"
"105","What is the primary characteristic of the `Recreate` deployment strategy in Kubernetes?","It ensures zero downtime during updates.","It involves stopping all old instances before starting new ones, causing downtime.","It gradually replaces old Pods with new ones.","It shifts traffic to a new version to a small percentage of users.","It requires manual intervention for every step.","B","The `Recreate` strategy terminates all running instances of the old version of an application before deploying the new version. This guarantees no old Pods are running, but results in downtime.","Cloud Native Application Delivery","Application Delivery Strategies"
"106","Which Kubernetes object is used to define a set of Pods that have stable network identities and persistent storage for each replica, making it suitable for stateful applications?","Deployment","ReplicaSet","DaemonSet","Job","StatefulSet","E","`StatefulSet`s are designed for stateful applications, providing stable, unique network identifiers (e.g., myapp-0, myapp-1) and stable, persistent storage for each Pod replica.","Kubernetes Fundamentals","Kubernetes Resources"
"107","What is the primary purpose of a `LimitRange` in Kubernetes?","To define the maximum number of Pods allowed in a Namespace.","To set default resource requests/limits for Pods and enforce minimum/maximum values within a Namespace.","To configure network policies for Pods.","To manage external traffic routing.","To schedule Pods with specific priorities.","B","A `LimitRange` applies constraints to resource requests and limits within a Namespace, ensuring that Pods conform to a predefined resource usage policy.","Kubernetes Fundamentals","Resource Management"
"108","What is the primary benefit of `Distributed Tracing` in a microservices environment?","It provides a centralized logging solution.","It aggregates metrics from all services into a single dashboard.","It allows developers to visualize the end-to-end flow of requests across multiple services and identify performance bottlenecks.","It automatically generates alerts for service failures.","It manages the deployment of new microservices.","C","Distributed tracing provides end-to-end visibility into requests as they flow through a distributed system, helping to debug latency, errors, and understand service dependencies.","Cloud Native Observability","Telemetry & Observability"
"109","Which pattern involves an application connecting to a remote service via a local proxy running in the same Pod?","Sidecar","Ambassador","Adapter","Decorator","Bridge","B","The Ambassador pattern uses a specialized sidecar container to proxy communication to external services, abstracting away service discovery, routing, and other network complexities from the main application.","Cloud Native Architecture","Design Patterns"
"110","What is the primary purpose of `kube-controller-manager`'s `endpoint-controller`?","To manage the creation of Pods.","To ensure that `Endpoints` objects are updated with the correct IP addresses of healthy Pods for Services.","To schedule Pods onto nodes.","To manage network policies.","To handle API authentication.","B","The `endpoint-controller` (part of the controller manager) watches for Services and Pods and ensures that `Endpoints` objects (which list the IPs and ports of Pods backing a Service) are kept up-to-date.","Kubernetes Fundamentals","Kubernetes Architecture"
"111","What is the main challenge `Horizontal Pod Autoscaler` (HPA) addresses regarding resource allocation?","Over-provisioning or under-provisioning of Pod replicas based on fluctuating load.","Automatically adjusting the CPU and memory requests for existing Pods.","Determining which nodes are available for scheduling.","Managing persistent storage for stateful applications.","Securing network communication between Pods.","A","HPA dynamically adjusts the number of Pod replicas based on observed metrics (like CPU utilization or custom metrics), ensuring that the application scales to meet demand without constant manual intervention or wasted resources.","Cloud Native Architecture","Autoscaling"
"112","What does the `IngressClass` resource in Kubernetes primarily define?","The type of external load balancer to use for an Ingress.","A way to describe the capabilities of an Ingress Controller and to bind Ingress resources to a specific controller implementation.","The set of hostnames an Ingress can manage.","The network policies applied to an Ingress.","The maximum number of Ingress rules allowed.","B","`IngressClass` allows you to define different types of Ingress Controllers and configure them, enabling multiple Ingress Controller implementations in a single cluster and binding Ingress resources to specific ones.","Kubernetes Fundamentals","Kubernetes Resources"
"113","What is the primary benefit of `Infrastructure as Code` (IaC) in a cloud native environment?","It enables manual configuration of infrastructure components.","It provides a graphical user interface for managing infrastructure.","It allows infrastructure to be provisioned, managed, and version-controlled using code, promoting consistency and repeatability.","It reduces the need for any kind of infrastructure.","It only applies to virtual machines, not containers.","C","IaC manages and provisions infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. This leads to consistency, repeatability, and versioning.","Cloud Native Architecture","Cloud Native Principles"
"114","Which component is typically responsible for routing external HTTP/S traffic to the correct Service within a Kubernetes cluster based on rules defined in an Ingress resource?","kube-proxy","kube-scheduler","Ingress Controller","kubelet","CoreDNS","C","The Ingress Controller (e.g., Nginx Ingress Controller, Traefik, ALB Ingress Controller) is a specialized load balancer that implements the rules defined by Ingress resources to route external HTTP/S traffic.","Container Orchestration","Networking"
"115","What is the main advantage of `Prometheus`'s pull-based metric collection model?","It requires applications to constantly push metrics, increasing network load.","It simplifies debugging by having the monitoring system actively scrape known endpoints, reducing complexity for application developers.","It can only collect metrics from static, unchanging targets.","It is primarily designed for log aggregation.","It automatically discovers all applications without any configuration.","B","Prometheus's pull model simplifies target management and allows for easy debugging. The Prometheus server actively scrapes metrics from configured endpoints, reducing the complexity of instrumentation for applications.","Cloud Native Observability","Prometheus"
"116","What is `container image signing` primarily intended to achieve in a secure software supply chain?","To reduce the size of container images.","To compress container images for faster download.","To cryptographically verify the authenticity and integrity of container images, ensuring they come from a trusted source and haven't been tampered with.","To encrypt the contents of container images.","To provide a unique identifier for each container image.","C","Container image signing uses digital signatures to verify that an image was built and published by a trusted entity and has not been altered since it was signed, enhancing supply chain security.","Cloud Native Application Delivery","Security"
"117","Which Kubernetes object is used to define custom, cluster-wide configurations that apply to multiple Pods, often used for injecting sidecars or enforcing policies?","ConfigMap","Secret","CustomResourceDefinition (CRD)","PodTemplate","MutatingAdmissionWebhook","C","A `CustomResourceDefinition` (CRD) allows you to define a new kind of resource that extends the Kubernetes API, which can then be used to create custom controllers (Operators) to manage instances of that resource.","Kubernetes Fundamentals","Kubernetes API"
"118","What is the primary role of the `Service` object's `selector` field?","To select which nodes the Service should run on.","To select the Pods that the Service will route traffic to, based on their labels.","To select which external IP address the Service should use.","To select which namespaces the Service applies to.","To select the container image for the Service.","B","The `selector` field in a Service definition identifies the set of Pods that the Service should route traffic to. Pods matching the selector's labels become endpoints for the Service.","Kubernetes Fundamentals","Kubernetes Resources"
"119","What is the main challenge with `HostAliases` in a Pod definition?","They provide insecure DNS resolution.","They are static and require Pod restarts for changes, making them unsuitable for dynamic environments.","They can conflict with `CoreDNS`.","They cannot be used for external hostnames.","They require complex network configurations.","B","`HostAliases` provide static entries to a Pod's `/etc/hosts` file. Since they are part of the Pod's immutable definition, any change requires recreating the Pod, limiting their use in dynamic scenarios.","Kubernetes Fundamentals","Networking"
"120","Which Kubernetes resource allows you to define policies for Pods that should not be disrupted (evicted) during voluntary node operations?","ResourceQuota","LimitRange","PodDisruptionBudget","HorizontalPodAutoscaler","VerticalPodAutoscaler","C","A `PodDisruptionBudget` (PDB) defines the minimum number or percentage of Pods of a given application that must be available during voluntary disruptions, protecting against service outages during maintenance.","Container Orchestration","Availability"
"121","What is the primary benefit of `Microservices Architecture` in cloud native application development?","It simplifies the development of monolithic applications.","It reduces the overall number of services in an application.","It enables independent development, deployment, and scaling of smaller, self-contained services, leading to greater agility and resilience.","It eliminates the need for inter-service communication.","It ensures all services share a single database.","C","Microservices break down large applications into small, independent services that communicate over APIs. This allows teams to develop, deploy, and scale services independently, accelerating development and improving fault isolation.","Cloud Native Architecture","Microservices"
"122","Which tool is primarily used for log aggregation and analysis in a Kubernetes environment?","Prometheus","Grafana","Fluentd/Fluent Bit","Alertmanager","Kube-state-metrics","C","Fluentd and Fluent Bit are popular open-source data collectors used for log aggregation, collecting logs from various sources (including Kubernetes Pods) and forwarding them to centralized logging systems.","Cloud Native Observability","Telemetry & Observability"
"123","What is the primary purpose of `Kubernetes Admission Controllers`?","To route network traffic between Pods.","To enforce policies and validate, mutate, or reject API requests before they are persisted in etcd.","To schedule Pods onto nodes.","To manage persistent storage volumes.","To encrypt communication between control plane components.","B","Admission controllers are plugins that intercept requests to the Kubernetes API server after authentication and authorization but before persistence. They can validate the request, mutate it, or deny it entirely based on defined policies.","Kubernetes Fundamentals","Kubernetes API"
"124","What is the primary role of the `Service Mesh Interface` (SMI) in the cloud native ecosystem?","To define standards for container image formats.","To standardize common service mesh features across different implementations, promoting interoperability and reducing vendor lock-in.","To provide a common API for Kubernetes networking.","To manage persistent storage for stateful applications.","To define custom resource definitions for applications.","B","SMI provides a set of common, portable APIs that enable developers and operators to interact with various service mesh technologies in a standardized way, allowing for easier adoption and switching between meshes.","Container Orchestration","Service Mesh"
"125","What is the primary security benefit of using a `network policy` for egress traffic in Kubernetes?","It prevents unauthorized inbound connections to Pods.","It controls the outbound network connections that a Pod is allowed to make to other Pods or external endpoints.","It encrypts all outbound traffic from the Pod.","It reduces the network latency for outbound connections.","It allows all outbound connections by default.","B","Egress network policies define which outbound connections a Pod is permitted to make, limiting the blast radius of a compromised Pod by preventing it from reaching unauthorized internal or external resources.","Container Orchestration","Security"
"126","What is the primary goal of `Continuous Integration` (CI) in a CI/CD pipeline?","To deploy code directly to production.","To ensure that code changes from multiple developers are integrated frequently into a shared repository and automatically tested to detect integration issues early.","To manually test all application features.","To manage infrastructure provisioning.","To generate release notes for software versions.","B","CI involves frequent integration of code changes into a central repository, followed by automated builds and tests, to quickly identify and fix integration problems.","Cloud Native Application Delivery","CI/CD"
"127","What is the role of `labels` and `selectors` in Kubernetes?","To define network routes between clusters.","To categorize and group Kubernetes objects (labels) and to specify which objects a controller or service should operate on (selectors).","To manage user authentication and authorization.","To store sensitive data securely.","To assign IP addresses to Pods.","B","Labels are key-value pairs attached to objects, used to identify their characteristics. Selectors are used by controllers (like Deployments, Services) to find and manage objects with specific labels.","Kubernetes Fundamentals","Kubernetes Resources"
"128","When designing a cloud native application, what is the primary benefit of designing services to be `stateless`?","They require persistent storage on the node.","They are easier to scale horizontally, recover from failures, and can be deployed more flexibly as they don't depend on local data.","They improve network performance dramatically.","They are harder to test in isolation.","They consume more CPU and memory resources.","B","Stateless services do not store session or application data locally. This makes them highly scalable (just add more instances), resilient (any instance can serve any request, and failure of one doesn't lose data), and easier to deploy.","Cloud Native Architecture","Design Principles"
"129","What is the primary purpose of `kube-scheduler`'s `taints` and `tolerations`?","To define resource limits for Pods.","To prevent Pods from being scheduled on (taints) or allow Pods to be scheduled on (tolerations) nodes with specific characteristics or issues.","To prioritize scheduling of critical Pods.","To ensure Pods are evenly distributed across nodes.","To manage network policies for nodes.","B","Taints are properties on nodes that repel Pods unless the Pod has a matching toleration, allowing for dedicating nodes or isolating nodes with issues.","Kubernetes Fundamentals","Scheduling"
"130","What is the role of `Container Storage Interface` (CSI) in Kubernetes?","To define the networking model for containers.","To provide a standardized interface for container orchestrators to interact with various storage systems.","To manage container images in a registry.","To encrypt data within containers.","To perform health checks on storage devices.","B","CSI is a standard for exposing arbitrary block and file storage systems to containerized workloads on orchestrators like Kubernetes. It allows third-party storage providers to develop plugins that can be deployed independently.","Container Orchestration","Storage"
"131","Which Kubernetes object defines a logical set of Pods and a policy to access them, but does not create or manage the Pods themselves?","Pod","Deployment","Service","ReplicaSet","DaemonSet","C","A Service abstracts away the underlying Pods and provides a stable network endpoint. It selects Pods based on labels but does not control their lifecycle.","Kubernetes Fundamentals","Kubernetes Resources"
"132","What is the primary function of `Prometheus`'s `node_exporter`?","To collect application-specific metrics.","To expose hardware and OS metrics from nodes (CPU, memory, disk I/O, network I/O) for Prometheus to scrape.","To aggregate logs from all nodes.","To send alerts based on node health.","To manage container runtimes on nodes.","B","The `node_exporter` is a common Prometheus exporter that runs on each node and exposes a wide range of operating system and hardware-level metrics.","Cloud Native Observability","Prometheus"
"133","What is the primary benefit of `Ephemeral Volumes` (e.g., `emptyDir` or `CSI ephemeral volumes`)?","They provide long-term, persistent storage for stateful applications.","They are suitable for temporary data that needs to be shared between containers within a Pod or between Pod restarts, but is not persistent beyond the Pod's lifecycle.","They are encrypted by default.","They reduce the overall storage consumption of the cluster.","They can be dynamically resized by applications.","B","Ephemeral volumes provide short-lived storage that lasts only as long as the Pod (or the specific container that uses CSI ephemeral volumes), ideal for temporary data or cache.","Kubernetes Fundamentals","Storage"
"134","What is the primary purpose of a `Horizontal Pod Autoscaler` (HPA) using `resource metrics` (e.g., CPU, Memory)?","To adjust the resource requests and limits of existing Pods.","To scale the number of Pod replicas up or down based on the Pods' observed resource utilization.","To add or remove nodes from the cluster.","To manage the number of persistent volumes.","To update container images automatically.","B","HPA with resource metrics scales the number of Pods based on the CPU or memory utilization observed from the Pods themselves, ensuring workloads meet demand.","Cloud Native Architecture","Autoscaling"
"135","What is the main challenge `Service Mesh` addresses regarding inter-service communication compared to traditional methods?","Simplifying application code by offloading concerns like routing, security, and observability from the application layer to the infrastructure layer.","Reducing the number of microservices required.","Eliminating the need for any network configuration.","Providing persistent storage for all services.","Automating database migrations.","A","A service mesh abstracts common cross-cutting concerns (traffic management, resiliency, security, observability) from application code, allowing developers to focus on business logic.","Container Orchestration","Service Mesh"
"136","What is the primary benefit of using `Readiness Gates` in Kubernetes?","To control the order of container startup within a Pod.","To allow external feedback (e.g., from a service mesh or external health check system) to influence a Pod's readiness status, preventing traffic from being sent to unready Pods.","To ensure Pods are always scheduled on specific nodes.","To manage persistent storage for stateful applications.","To encrypt inter-Pod communication.","B","Readiness gates allow external controllers or systems (like a service mesh's health check or a custom controller) to add custom conditions to a Pod's readiness state, giving them influence over when a Pod is considered ready to receive traffic.","Kubernetes Fundamentals","Health Checks"
"137","What is the primary role of a `Kubernetes Federation` (now largely superseded by multi-cluster tools)?","To manage a single, large Kubernetes cluster.","To manage multiple Kubernetes clusters as a single logical unit, allowing for global load balancing and cross-cluster resource synchronization.","To replace the Kubernetes API server.","To provide persistent storage across multiple clouds.","To automate container image builds across different regions.","B","Kubernetes Federation (v1) aimed to manage multiple Kubernetes clusters from a single control plane, enabling features like cross-cluster service discovery and workload distribution. While v1 is deprecated, the concept is relevant to multi-cluster management.","Container Orchestration","Multi-cluster"
"138","What is the primary purpose of `kube-scheduler`'s `tolerations`?","To add specific labels to nodes.","To define properties that allow Pods to be scheduled on nodes that have matching taints, overriding the default repulsion.","To limit the resource consumption of Pods.","To provide stable network identities for Pods.","To manage external traffic to the cluster.","B","Tolerations are applied to Pods and allow (but do not guarantee) the Pod to be scheduled on nodes that have matching taints. This is often used with taints to dedicate nodes or manage node conditions.","Kubernetes Fundamentals","Scheduling"
"139","Which cloud native principle advocates for building services as independent, self-contained units that can be developed, deployed, and scaled independently?","Monolithic Design","Serverless Computing","Microservices","Big Data","Batch Processing","C","Microservices architecture breaks down applications into loosely coupled, independently deployable services, which is a core cloud native principle for agility and scalability.","Cloud Native Architecture","Cloud Native Principles"
"140","What is the main challenge with `Static Provisioning` of PersistentVolumes (PVs) compared to `Dynamic Provisioning`?","It requires more manual intervention from administrators to create PVs for each PVC request.","It is more flexible and automated.","It is less secure for sensitive data.","It does not support different storage types.","It results in higher storage costs.","A","Static provisioning requires an administrator to pre-create PVs. Dynamic provisioning, enabled by `StorageClass`, automates the creation of PVs based on PVC requests, making storage management more efficient for users.","Container Orchestration","Storage"
"141","What does `node-problem-detector` typically identify in a Kubernetes cluster?","Issues with application code within Pods.","Problems with the underlying node, such as kernel deadlocks, hardware failures, or network issues.","Misconfigurations in Kubernetes services.","Excessive resource consumption by the control plane.","Security vulnerabilities in container images.","B","`node-problem-detector` is a daemon that runs on each node and reports system issues (e.g., kernel errors, disk pressure, network unreachability) as NodeConditions or events to the API server.","Cloud Native Observability","Node Management"
"142","What is the primary benefit of integrating `external metrics` with `Horizontal Pod Autoscaler` (HPA)?","To scale Pods based on CPU or memory usage only.","To enable scaling based on metrics from systems outside of Kubernetes, such as message queue depth or database connections.","To provide more detailed logs for autoscaling events.","To automatically adjust resource requests and limits for Pods.","To reduce the number of Pod replicas.","B","External metrics allow HPA to scale workloads based on metrics emitted by external systems that aren't directly related to Kubernetes Pods (e.g., custom business metrics, external queue lengths, IoT data).","Cloud Native Architecture","Autoscaling"
"143","What is the primary role of a `Custom Resource Definition` (CRD) in Kubernetes?","To provide persistent storage for applications.","To define custom API objects that extend Kubernetes' capabilities.","To manage network traffic between Pods.","To authenticate users to the API server.","To schedule Pods onto nodes.","B","CRDs allow users to define their own custom resources, extending the Kubernetes API and enabling the creation of custom controllers (Operators) to manage those resources.","Kubernetes Fundamentals","Kubernetes API"
"144","What does it mean for a Pod to be in a `CrashLoopBackOff` state?","The Pod has successfully completed its task and terminated.","The container within the Pod is continuously starting, crashing, and restarting.","The Pod is waiting for a dependent service to become available.","The Pod has been evicted from the node due to resource constraints.","The Pod's network configuration is incorrect.","B","`CrashLoopBackOff` indicates that a container inside the Pod is starting, running for a short period, and then crashing repeatedly. Kubernetes is applying an exponential back-off delay before retrying.","Kubernetes Fundamentals","Troubleshooting"
"145","What is the main purpose of `kube-scheduler` 's `preemption` mechanism?","To ensure high-priority Pods get scheduled quickly by evicting lower-priority Pods if necessary.","To prevent Pods from crashing due to out-of-memory errors.","To evenly distribute Pods across all available nodes.","To prioritize API requests to the scheduler.","To automatically scale the number of nodes in the cluster.","A","When a higher-priority Pod cannot be scheduled due to insufficient resources, the scheduler can preempt (evict) one or more lower-priority Pods from a node to make room.","Kubernetes Fundamentals","Scheduling"
"146","Which Kubernetes networking concept ensures that Pods on different nodes can communicate with each other directly without NAT?","Service Mesh","Ingress Controller","Container Network Interface (CNI) Plugin","LoadBalancer Service","Network Policy","C","A CNI plugin (e.g., Calico, Flannel, Cilium) implements the Kubernetes networking model, which requires that every Pod gets its own IP address and that Pods on different nodes can communicate directly.","Container Orchestration","Networking"
"147","What is the primary function of the `Kubernetes Dashboard` (if installed)?","To manage underlying cloud infrastructure.","To provide a web-based UI for managing and monitoring Kubernetes cluster resources.","To encrypt data in etcd.","To schedule Pods onto nodes.","To store historical metric data.","B","The Kubernetes Dashboard is a general-purpose, web-based UI for Kubernetes clusters. It allows users to manage and troubleshoot applications, as well as manage the cluster itself.","Kubernetes Fundamentals","Management Tools"
"148","In the context of Kubernetes storage, what is the role of a `StorageClass`?","To define how Pods should access volumes.","To specify the type of storage and provisioning mechanism for PersistentVolumes dynamically.","To encrypt data stored in volumes.","To limit the size of PersistentVolumeClaims.","To manually create PersistentVolumes.","B","A `StorageClass` provides a way for administrators to describe the 'classes' of storage they offer. It enables dynamic provisioning of PersistentVolumes based on user requests for a specific class.","Container Orchestration","Storage"
"149","What is the primary benefit of using `ImagePullSecrets` in Kubernetes Pods?","To encrypt container images at rest.","To authenticate to private container registries to pull images.","To reduce the size of container images.","To speed up image downloads from public registries.","To prevent unauthorized pushing of images to registries.","B","`ImagePullSecrets` are used in Pods to provide credentials (username, password, token) for authenticating with private container image registries, allowing the kubelet to pull images.","Container Orchestration","Security"
"150","What is the primary concern when configuring `hostNetwork: true` for a Pod?","It prevents the Pod from accessing external networks.","It makes the Pod's network directly use the host's network namespace, potentially exposing the host's ports and increasing the attack surface.","It restricts the Pod's access to internal cluster services.","It requires manual IP address assignment for the Pod.","It interferes with DNS resolution within the cluster.","B","When `hostNetwork: true`, a Pod's containers share the network namespace of the host node, meaning they can directly access the host's network interfaces and ports. This can be a security risk and may lead to port conflicts.","Container Orchestration","Security"
"151","Which Kubernetes feature allows you to define constraints or policies for Pods that run on any node, such as disallowing privileged containers or requiring read-only root filesystems?","NetworkPolicy","PodSecurityPolicy (deprecated)","ResourceQuota","LimitRange","ServiceAccount","B","`PodSecurityPolicy` was a cluster-level resource that controlled security-sensitive aspects of the Pod specification. It has been deprecated and replaced by Pod Security Admission.","Container Orchestration","Security"
"152","What is the main reason for Kubernetes to use `CoreDNS` (or kube-dns) within the cluster?","To provide external DNS resolution for applications outside the cluster.","To manage persistent storage for stateful applications.","To provide DNS-based service discovery for services and Pods within the cluster.","To encrypt network traffic between Pods.","To balance load between external services.","C","`CoreDNS` (or its predecessor `kube-dns`) provides DNS-based service discovery within the cluster, allowing Pods to find Services by name (e.g., `my-service.my-namespace.svc.cluster.local`).","Kubernetes Fundamentals","Networking"
"153","What is the primary role of a `Service Topology` in Kubernetes?","To define the network path between different clusters.","To route traffic to Pods based on their location (e.g., node, zone, region) for latency optimization or cost savings.","To create a mesh network between all Pods.","To monitor network performance across different clouds.","To provide a visualization of the service graph.","B","Service Topology allows a service to route traffic to endpoints that are ""closer"" to the client Pod, based on node, zone, or region labels, improving latency and potentially reducing inter-zone data transfer costs.","Container Orchestration","Networking"
"154","When migrating a monolithic application to microservices, what is a common challenge related to data management?","Simplifying database schemas.","Maintaining transactional consistency across distributed services.","Eliminating the need for any databases.","Reducing data storage costs.","Ensuring all data is stored on a single server.","B","Maintaining strong transactional consistency (ACID properties) across multiple, independent microservices that each manage their own data store is a significant challenge in microservices design.","Cloud Native Architecture","Microservices"
"155","What is the primary benefit of `Sidecar Containers` in a Pod?","To provide a completely isolated environment for each application.","To perform background tasks independently of the main application's lifecycle.","To extend or enhance the functionality of the main application container without modifying its code.","To act as a reverse proxy for incoming external traffic.","To manage persistent storage for the main application.","C","Sidecar containers run alongside the main application container within the same Pod, sharing the Pod's network and storage. They are used to provide cross-cutting concerns like logging, monitoring, or security agents without altering the core application.","Cloud Native Architecture","Design Patterns"
"156","What is the primary purpose of a `Horizontal Pod Autoscaler` (HPA) using `custom metrics`?","To scale Pods based on CPU or memory usage only.","To scale Pods based on application-specific metrics that are not CPU or memory, such as requests per second or queue depth.","To scale the number of worker nodes in the cluster.","To automatically adjust resource requests and limits for Pods.","To define a fixed number of Pod replicas.","B","HPA can use custom metrics (e.g., from Prometheus) that reflect the application's actual workload, allowing for more precise and responsive autoscaling than just CPU/memory.","Cloud Native Architecture","Autoscaling"
"157","What is the primary use case for `externalTrafficPolicy: Local` on a Kubernetes Service of type NodePort or LoadBalancer?","To force traffic to only use the loopback interface.","To ensure that client source IP addresses are preserved when traffic is routed to Pods on the same node.","To distribute traffic evenly across all nodes in the cluster.","To encrypt external traffic to the service.","To prevent external access to the service.","B","`externalTrafficPolicy: Local` ensures that external traffic is only routed to Pods on the same node where the incoming traffic arrived, preserving the client's source IP and avoiding extra network hops (though it can lead to unbalanced traffic).","Container Orchestration","Networking"
"158","What is the main advantage of using `Declarative Deployments` (e.g., Kubernetes YAML) over `Imperative Commands` (e.g., Docker run) in a CI/CD pipeline?","Declarative deployments are faster to write for one-off tasks.","Imperative commands are better for version control.","Declarative deployments define the desired end state, making rollbacks and reconciliation more reliable and automated.","Imperative commands are more readable.","Declarative deployments do not require a container registry.","C","Declarative configurations describe the *what* (the desired state), allowing the system to handle the *how* (the steps to reach that state), which is crucial for automation, idempotency, and reliable rollbacks in CI/CD.","Cloud Native Application Delivery","Application Delivery Fundamentals"
"159","Which Kubernetes security mechanism explicitly states that a Pod should not be able to interact with the API server with elevated privileges unless explicitly granted?","NetworkPolicy","SecurityContext","ServiceAccount with RBAC","PodSecurityPolicy (deprecated)","HostPath","C","By default, Pods get a `default` ServiceAccount. To interact with the API server with specific permissions, a dedicated ServiceAccount is created and granted permissions via RBAC `Role` and `RoleBinding`.","Container Orchestration","Security"
"160","What is the primary purpose of `kube-controller-manager`'s `replication-controller`?","To manage the replication of etcd data.","To ensure a specified number of Pod replicas are running and available.","To replicate container images across registries.","To manage replication of PersistentVolumes.","To control the replication of control plane components.","B","The `replication-controller` (managed by `Deployment`s) ensures that a specified number of Pod replicas defined in a ReplicaSet are always running, replacing failed or terminated Pods.","Kubernetes Fundamentals","Kubernetes Architecture"
"161","In a cloud native observability stack, what is the role of a `Collector` (e.g., OpenTelemetry Collector, Fluentd)?","To visualize metrics and logs on a dashboard.","To store long-term telemetry data.","To receive, process, and export telemetry data (metrics, logs, traces) to various backends.","To generate synthetic traffic for monitoring.","To trigger alerts based on anomalies.","C","Collectors act as intermediaries, receiving telemetry data from applications and infrastructure, processing it (filtering, transforming, enriching), and then exporting it to various storage or analysis systems.","Cloud Native Observability","Telemetry & Observability"
"162","What is the primary challenge in ensuring data consistency for a distributed stateful application deployed on Kubernetes?","Managing network latency between Pods.","Ensuring data integrity and consistency across multiple, potentially independent, persistent volumes managed by different Pods.","Simplifying container image builds.","Automating horizontal scaling.","Securing access to the Kubernetes API.","B","Maintaining strong consistency (e.g., strong consistency for writes) across distributed data stores, especially with independent instances of stateful applications, is a complex challenge.","Container Orchestration","Storage"
"163","Which Kubernetes network policy implementation typically offers advanced features like L7 policy enforcement, mTLS, and observability?","Standard Kubernetes NetworkPolicy","Calico","Cilium","Flannel","Weave Net","C","Cilium is a CNI plugin that integrates with eBPF to provide advanced networking and security features, including L7 policy, mTLS, and rich observability, going beyond basic Kubernetes NetworkPolicy capabilities.","Container Orchestration","Networking"
"164","What is the primary benefit of `OpenTracing` or `OpenTelemetry` for distributed systems?","To provide a centralized log aggregation solution.","To standardize the collection and correlation of distributed traces across different services and languages.","To manage Kubernetes cluster configuration.","To secure communication between microservices with mTLS.","To automate container image builds.","B","OpenTracing (now part of OpenTelemetry) provides vendor-agnostic APIs and instrumentation libraries for distributed tracing, enabling end-to-end visibility into requests across microservices regardless of language or framework.","Cloud Native Observability","Telemetry & Observability"
"165","What is the purpose of `kube-proxy`'s `ipvs` mode compared to `iptables` mode?","`ipvs` is less efficient for large numbers of services and endpoints.","`ipvs` uses a different kernel module for load balancing, generally offering better performance and scalability for large clusters.","`ipvs` does not support UDP services.","`ipvs` requires more complex configuration.","`ipvs` only works with `NodePort` services.","B","IPVS (IP Virtual Server) mode in `kube-proxy` offers more scalable and performant load balancing compared to `iptables` mode, especially for clusters with a high number of services and endpoints.","Container Orchestration","Networking"
"166","Which Kubernetes resource is used to provide service-level load balancing of external HTTP/S traffic to multiple Services based on hostnames or URL paths?","Service","Ingress","EndpointSlice","NetworkPolicy","LoadBalancer","B","Ingress manages external access to services within the cluster, typically HTTP/S, by providing URL-based routing, host-based routing, and TLS termination.","Kubernetes Fundamentals","Kubernetes Resources"
"167","What is the core principle of the `Immutable Container` pattern in cloud native?","Containers should be constantly updated in place to apply patches.","Containers should be treated as disposable, and any changes require rebuilding and redeploying a new image.","Containers should store all application data within their filesystem.","Containers should always run as the root user for flexibility.","Containers should be manually configured after deployment.","B","The immutable container pattern treats containers as fixed units. Any change, no matter how small, requires building a new container image and replacing the old one, leading to greater consistency and reliability.","Cloud Native Architecture","Design Patterns"
"168","What is the primary reason for using a `Container Registry` (e.g., Docker Hub, GCR, ECR) in a cloud native workflow?","To store application source code.","To provide persistent storage for application data.","To store and manage container images for distribution and deployment.","To run continuous integration tests.","To manage Kubernetes cluster configurations.","C","A container registry is a centralized repository for storing, managing, and distributing container images, essential for CI/CD pipelines and Kubernetes deployments.","Cloud Native Application Delivery","Application Delivery Fundamentals"
"169","What is the main challenge with `HostPath` volumes regarding Pod scheduling and high availability?","They are too slow for production workloads.","They are not secure enough for any data.","They tie a Pod to a specific node, making it difficult for Kubernetes to reschedule the Pod if the node fails or needs maintenance.","They consume too much memory on the host.","They cannot be shared between multiple Pods.","C","`HostPath` volumes directly expose a path on the host node. This means if a Pod using `HostPath` needs to be rescheduled (e.g., due to node failure or drain), it cannot easily move as its data is tied to the specific original node.","Container Orchestration","Storage"
"170","Which Kubernetes security concept aims to limit the capabilities available to a container, reducing its ability to perform privileged operations on the host?","RBAC","NetworkPolicy","SecurityContext `capabilities`","PodSecurityPolicy (deprecated)","ServiceAccount","C","The `capabilities` field within a container's `SecurityContext` allows administrators to add or drop specific Linux capabilities (e.g., `NET_ADMIN`, `SYS_ADMIN`), reducing the container's attack surface.","Container Orchestration","Security"
"171","What is the primary purpose of the `Node` controller in the `kube-controller-manager`?","To manage the lifecycle of Pods.","To ensure that Nodes are registered in the API server and their health status is updated.","To schedule Pods onto Nodes.","To handle network routing for Pods.","To manage persistent volumes on Nodes.","B","The Node controller watches the API server for Node updates, populates Node objects, and is responsible for noticing when nodes go down (by checking their heartbeats) and cleaning up their Pods.","Kubernetes Fundamentals","Kubernetes Architecture"
"172","What does a `Distroless` container image primarily aim to achieve?","To include all necessary operating system tools for debugging.","To be as small as possible by containing only the application and its direct runtime dependencies, without a package manager or shell.","To run multiple applications in a single container.","To support multiple programming languages.","To provide a graphical user interface for the application.","B","Distroless images contain only your application and its runtime dependencies. They omit package managers, shells, and other programs you'd expect in a standard Linux distribution, reducing image size and attack surface.","Cloud Native Architecture","Containers"
"173","What is the `event` type most relevant for understanding lifecycle changes and issues within Kubernetes resources (e.g., Pod scheduling failures, image pull errors)?","Metrics","Logs","Traces","Kubernetes Events","Alerts","D","Kubernetes Events are objects that provide insights into what is happening inside a cluster, such as when a Pod is scheduled, a container starts, or a PersistentVolume fails to mount.","Cloud Native Observability","Telemetry & Observability"
"174","What is the primary benefit of `Managed Kubernetes Services` (e.g., GKE, EKS, AKS) over self-managed Kubernetes?","More fine-grained control over control plane components.","Reduced operational overhead for cluster management and upgrades.","Lower direct infrastructure costs for worker nodes.","Guaranteed uptime for application Pods.","Complete ownership of the underlying OS for worker nodes.","B","Managed Kubernetes services handle the operation, maintenance, and upgrades of the Kubernetes control plane, significantly reducing the operational burden on users and often providing SLAs for the control plane's availability.","Container Orchestration","Managed Services"
"175","When performing `rolling updates` with a Kubernetes Deployment, what parameter controls the maximum number of Pods that can be unavailable during the update?","`minReadySeconds`","`maxSurge`","`maxUnavailable`","`progressDeadlineSeconds`","`replicas`","C","`maxUnavailable` (part of `strategy.rollingUpdate`) specifies the maximum number of Pods that can be unavailable during the update process. This helps control the impact on application availability.","Kubernetes Fundamentals","Kubernetes Resources"
"176","What is the primary purpose of `health checks` (Liveness and Readiness Probes) in Kubernetes?","To reduce the network latency of Pods.","To determine if containers are running correctly and capable of serving traffic, enabling self-healing and load balancing.","To manage persistent storage volumes.","To encrypt communication between Pods.","To distribute load across different services.","B","Liveness probes ensure containers are running and restart them if they're not. Readiness probes determine if a container is ready to serve traffic and remove it from service endpoints if it's not ready.","Kubernetes Fundamentals","Health Checks"
"177","What is a `sidecar proxy` (e.g., Envoy in Istio) typically used for in a service mesh?","To act as the main application container.","To provide persistent storage for the application.","To intercept and manage all inbound and outbound network traffic for the main application container.","To schedule the Pod onto a node.","To monitor the host operating system metrics.","C","A sidecar proxy runs alongside the application container and intercepts all network traffic, allowing the service mesh to apply policies for traffic management, security (mTLS), and observability without application code changes.","Container Orchestration","Service Mesh"
"178","Which aspect of cloud native security focuses on continuously monitoring runtime behavior of containers for anomalous activity or threats?","Container Image Scanning","Network Policy","Runtime Security","Supply Chain Security","Secrets Management","C","Runtime security solutions monitor containers as they execute, detecting and alerting on suspicious activities, deviations from expected behavior, or active threats.","Container Orchestration","Security"
"179","What is the primary goal of `GitOps` when applied to infrastructure management (Infrastructure as Code)?","To allow manual changes directly on production servers.","To treat infrastructure as mutable, allowing ad-hoc modifications.","To store infrastructure configuration in a version-controlled Git repository and automate its reconciliation with the live state.","To only manage stateless infrastructure components.","To eliminate the need for any automation tools.","C","GitOps extends the principles of Git-based declarative application delivery to infrastructure, treating Git as the single source of truth for desired infrastructure state.","Cloud Native Application Delivery","GitOps"
"180","What is the primary benefit of using `Kubernetes Namespaces` for organizing resources?","They provide isolated kernel namespaces for containers.","They allow different teams to share a cluster securely while preventing resource name collisions and accidental interference.","They automatically assign unique IP addresses to all Pods.","They encrypt all data stored within them.","They reduce the overall resource consumption of the cluster.","B","Namespaces segment a Kubernetes cluster into virtual sub-clusters. This is crucial for multi-tenancy, providing scope for resource names, access control (RBAC), and resource quotas.","Kubernetes Fundamentals","Kubernetes Resources"
"181","Which tool is commonly used in a CI/CD pipeline to manage Kubernetes application deployments using charts?","Terraform","Ansible","Helm","Prometheus","Grafana","C","Helm is the de facto package manager for Kubernetes. Helm charts define, install, and upgrade even the most complex Kubernetes applications.","Cloud Native Application Delivery","Packaging"
"182","What is the primary role of the `kubelet`'s `CRI` (Container Runtime Interface) implementation?","To manage network policies for Pods.","To communicate with the container runtime (e.g., containerd) to manage Pods and their containers on a node.","To schedule Pods onto nodes.","To store cluster state information.","To expose the Kubernetes API.","B","The kubelet uses the CRI to interface with various container runtimes, abstracting away the specifics of how containers are managed (e.g., pulling images, starting/stopping containers).","Kubernetes Fundamentals","Kubernetes Architecture"
"183","What is the significance of `etcd` in the Kubernetes control plane?","It runs the user applications.","It stores the persistent state of the Kubernetes cluster, acting as the single source of truth.","It provides network connectivity between Pods.","It acts as a load balancer for external traffic.","It monitors the health of worker nodes.","B","etcd is a distributed, consistent key-value store that Kubernetes uses to store all cluster data, including configurations, state, and metadata.","Kubernetes Fundamentals","Kubernetes Architecture"
"184","What is the primary challenge that `Kubernetes Network Policy` aims to solve?","Enabling external access to Services.","Providing persistent storage for Pods.","Controlling network communication between Pods and network endpoints within the cluster, acting as a firewall.","Assigning IP addresses to Pods.","Encrypting all network traffic between nodes.","C","Network Policies allow administrators to specify how groups of Pods are allowed to communicate with each other and with external endpoints, enhancing cluster security by implementing segmentation.","Container Orchestration","Networking"
"185","What is a common use case for a `DaemonSet` in Kubernetes?","Running a single instance of a database for high availability.","Deploying a web application that scales horizontally.","Running a cluster-wide logging agent or monitoring agent on every (or specific) node.","Executing a one-off batch job.","Providing stable network identities for Pods.","C","DaemonSets ensure that a copy of a Pod runs on all (or a subset of) nodes, making them ideal for node-specific services like log collectors, monitoring agents, or storage daemons.","Kubernetes Fundamentals","Kubernetes Resources"
"186","What is the primary purpose of `kube-scheduler`'s `Node Selectors` and `Node Affinity`?","To randomly select a node for a Pod.","To allow users to constrain Pods to run on nodes with specific labels or characteristics.","To prioritize nodes with the least CPU usage.","To prevent Pods from being evicted during node maintenance.","To ensure Pods are always located in the same availability zone.","B","Node Selectors provide a simple way to constrain Pods to nodes with specific labels. Node Affinity offers more expressive rules, including soft (preferred) and hard (required) constraints.","Kubernetes Fundamentals","Scheduling"
"187","Which type of PersistentVolume access mode allows a volume to be mounted as read-write by a single Node?","ReadWriteOnce","ReadOnlyMany","ReadWriteMany","ReadWriteExecute","AppendOnly","A","`ReadWriteOnce` means the volume can be mounted as read-write by a single node. This is common for block storage (e.g., cloud disks).","Container Orchestration","Storage"
"188","What is the main benefit of `Containerization` in terms of dependency management?","It simplifies application code by removing dependencies.","It bundles all application dependencies into an isolated package, ensuring consistent runtime across environments.","It removes the need for package managers within the container.","It reduces the overall size of application binaries.","It allows direct access to host system libraries.","B","Containers package an application and all its dependencies (libraries, frameworks, configuration) into a self-contained, isolated unit, ensuring that the application runs consistently regardless of the underlying host environment.","Kubernetes Fundamentals","Containers"
"189","In a cloud native context, what does `DevOps` primarily emphasize?","Strict separation of development and operations teams.","Automating manual processes to bridge the gap between development and operations for faster, more reliable software delivery.","Focusing solely on coding and ignoring infrastructure.","Minimizing communication between teams.","Replacing operations teams with AI.","B","DevOps is a set of practices that combines software development (Dev) and IT operations (Ops) to shorten the systems development life cycle and provide continuous delivery with high software quality.","Cloud Native Architecture","Roles and Personas"
"190","What is the primary function of `Prometheus Alertmanager`?","To collect metrics from targets.","To store time-series data.","To handle alerts sent by Prometheus, grouping, deduplicating, and routing them to notification receivers.","To visualize metric dashboards.","To generate reports on system performance.","C","Alertmanager handles alerts sent by client applications like the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integration.","Cloud Native Observability","Prometheus"
"191","What is the main purpose of `kubectl expose`?","To create a Deployment resource.","To create a Service resource that exposes a Deployment, ReplicaSet, or Pod.","To configure an Ingress controller.","To directly expose a Pod on a host port.","To manage external load balancers.","B","`kubectl expose` is an imperative command used to create a Service that exposes an existing resource (like a Deployment or Pod) to the network, usually via a ClusterIP, NodePort, or LoadBalancer.","Kubernetes Fundamentals","Kubernetes API"
"192","Which type of Kubernetes resource is typically used for running scheduled tasks like daily backups or nightly reports?","Deployment","StatefulSet","DaemonSet","Job","CronJob","E","A `CronJob` creates `Job` objects on a repeating schedule. It's suitable for automated, time-based tasks.","Kubernetes Fundamentals","Kubernetes Resources"
"193","What is the primary benefit of `Managed Identity` (e.g., Azure AD Managed Identities, AWS IAM Roles for Service Accounts) for Pods in cloud environments?","It eliminates the need for any authentication to cloud provider APIs.","It allows Pods to securely authenticate to cloud services without embedding credentials in code or secrets.","It reduces network latency to cloud services.","It provides automatic scaling of cloud resources.","It encrypts all data stored in cloud storage.","B","Managed Identities provide an identity for your applications to use when connecting to cloud services, allowing secure access without managing credentials directly within your application or Kubernetes secrets.","Container Orchestration","Security"
"194","What is the primary role of the `Kubelet` in a Kubernetes worker node?","To store the cluster's desired state.","To run controllers that manage cluster resources.","To register the node with the API server, receive Pod specs, and ensure containers are running and healthy.","To provide a web UI for cluster management.","To manage external ingress traffic.","C","The `kubelet` is the agent that runs on each worker node. It registers the node, watches for Pods assigned to it, and instructs the container runtime to run and manage those Pods' containers.","Kubernetes Fundamentals","Kubernetes Architecture"
"195","What is the primary challenge addressed by `Prometheus `s `federation`?","Collecting metrics from a single, large application.","Enabling multiple Prometheus servers to scrape from each other, allowing for hierarchical aggregation and long-term storage in larger deployments.","Visualizing metric data in dashboards.","Sending alerts to multiple channels.","Ensuring data consistency across distributed databases.","B","Prometheus federation allows a Prometheus server to scrape data from another Prometheus server, enabling scaling of monitoring across multiple data centers or large, complex infrastructures.","Cloud Native Observability","Prometheus"
"196","What is the purpose of `readiness probes` in a Pod's lifecycle?","To determine if the container is still alive and restart it if it fails.","To determine if the container is ready to accept incoming network requests and include it in service endpoints.","To perform setup tasks before the main application starts.","To check if the container image can be pulled successfully.","To ensure the container has enough disk space.","B","A readiness probe checks if the application within the container is ready to serve traffic. If it fails, the Pod is removed from the Service's endpoints, preventing traffic from being sent to an unready instance.","Kubernetes Fundamentals","Health Checks"
"197","Which type of cloud native application delivery strategy involves deploying a new version alongside the old one and gradually shifting traffic to the new version, often with a manual or automated rollback option?","Blue/Green Deployment","Canary Release","Rolling Update","Recreate Deployment","Shadowing","B","Canary releases involve gradually rolling out a new version to a small subset of users, monitoring its performance, and then incrementally increasing the rollout if no issues are detected.","Cloud Native Application Delivery","Application Delivery Strategies"
"198","What is the primary goal of `Container Runtime Security` (e.g., Falco, Sysdig Secure)?","To scan container images for vulnerabilities.","To secure communication between containers.","To detect and prevent malicious activity within running containers, typically by monitoring system calls and runtime behavior.","To manage secrets used by containers.","To encrypt data within container volumes.","C","Container runtime security focuses on protecting containers during their execution by observing their behavior, detecting anomalies, and enforcing policies based on system calls, file access, and network activity.","Container Orchestration","Security"
"199","What is the function of `resource requests` and `limits` in a Kubernetes Pod definition?","To define the maximum number of Pod replicas.","To control network access for the Pod.","To tell the scheduler how much CPU and memory the Pod *needs* to run (request) and the maximum it *can* consume (limit).","To specify the container image version.","To manage persistent storage for the Pod.","C","`requests` tell the scheduler the minimum resources a Pod needs to be scheduled. `limits` define the maximum resources a container can use, preventing a single Pod from consuming all node resources.","Kubernetes Fundamentals","Resource Management"
"200","Which Kubernetes resource allows you to define policies for fine-grained control over Pod security, such as restricting access to host namespaces or requiring a non-root user?","NetworkPolicy","PodSecurityPolicy (deprecated)","SecurityContext","RoleBinding","ResourceQuota","B","`PodSecurityPolicy` (PSP) was a cluster-level resource that allowed cluster administrators to control security-sensitive aspects of the Pod specification. While deprecated, understanding its role is important for context with Pod Security Admission.","Container Orchestration","Security"
"201","What is the primary benefit of `Node Affinity` (soft or hard) over `nodeSelector` in Kubernetes scheduling?","It allows for more expressive and complex scheduling rules, including preference or anti-affinity.","It is simpler to configure for basic use cases.","It forces Pods to specific nodes, without any flexibility.","It is only used for stateful applications.","It ensures even distribution of Pods across all nodes.","A","`Node Affinity` provides a more powerful and flexible way to express rules for Pod scheduling onto nodes based on node labels, including ""required"" rules (must match) and ""preferred"" rules (try to match).","Kubernetes Fundamentals","Scheduling"
"202","What does `etcd`'s role in supporting Kubernetes' desired state management?","It executes the Pods.","It functions as the highly available backing store for all cluster data, allowing controllers to reliably reconcile actual state to desired state.","It provides network connectivity between Pods.","It performs health checks on nodes.","It logs all API requests.","B","etcd is a critical component for Kubernetes' declarative model, reliably storing the desired state of all resources. Controllers continuously watch etcd for changes and work to converge the cluster's actual state to the desired state.","Kubernetes Fundamentals","Kubernetes Architecture"
"203","Which component ensures that a Pod receives a unique IP address within the cluster's Pod network?","kube-proxy","kube-apiserver","CNI Plugin","kubelet","etcd","C","The CNI (Container Network Interface) plugin (e.g., Calico, Flannel) is responsible for allocating IP addresses to Pods and configuring the network interfaces to enable Pod-to-Pod communication.","Container Orchestration","Networking"
"204","What is the primary benefit of `ServiceAccounts` in Kubernetes security?","They provide a human user identity for cluster administrators.","They provide an identity for processes running in Pods to authenticate and authorize against the Kubernetes API.","They manage external DNS records for services.","They are used for authenticating to private container registries.","They encrypt data at rest within persistent volumes.","B","ServiceAccounts provide an identity for processes running in Pods, allowing them to make API calls to the Kubernetes control plane with specific permissions granted via RBAC.","Container Orchestration","Security"
"205","What is the primary characteristic of the `Recreate` deployment strategy in Kubernetes?","It ensures zero downtime during updates.","It involves stopping all old instances before starting new ones, causing downtime.","It gradually replaces old Pods with new ones.","It shifts traffic to a new version to a small percentage of users.","It requires manual intervention for every step.","B","The `Recreate` strategy terminates all running instances of the old version of an application before deploying the new version. This guarantees no old Pods are running, but results in downtime.","Cloud Native Application Delivery","Application Delivery Strategies"
"206","Which Kubernetes object is used to define a set of Pods that have stable network identities and persistent storage for each replica, making it suitable for stateful applications?","Deployment","ReplicaSet","DaemonSet","Job","StatefulSet","E","`StatefulSet`s are designed for stateful applications, providing stable, unique network identifiers (e.g., myapp-0, myapp-1) and stable, persistent storage for each Pod replica.","Kubernetes Fundamentals","Kubernetes Resources"
"207","What is the primary purpose of a `LimitRange` in Kubernetes?","To define the maximum number of Pods allowed in a Namespace.","To set default resource requests/limits for Pods and enforce minimum/maximum values within a Namespace.","To configure network policies for Pods.","To manage external traffic routing.","To schedule Pods with specific priorities.","B","A `LimitRange` applies constraints to resource requests and limits within a Namespace, ensuring that Pods conform to a predefined resource usage policy.","Kubernetes Fundamentals","Resource Management"
"208","What is the primary benefit of `Distributed Tracing` in a microservices environment?","It provides a centralized logging solution.","It aggregates metrics from all services into a single dashboard.","It allows developers to visualize the end-to-end flow of requests across multiple services and identify performance bottlenecks.","It automatically generates alerts for service failures.","It manages the deployment of new microservices.","C","Distributed tracing provides end-to-end visibility into requests as they flow through a distributed system, helping to debug latency, errors, and understand service dependencies.","Cloud Native Observability","Telemetry & Observability"
"209","Which pattern involves an application connecting to a remote service via a local proxy running in the same Pod?","Sidecar","Ambassador","Adapter","Decorator","Bridge","B","The Ambassador pattern uses a specialized sidecar container to proxy communication to external services, abstracting away service discovery, routing, and other network complexities from the main application.","Cloud Native Architecture","Design Patterns"
"210","What is the primary purpose of `kube-controller-manager`'s `endpoint-controller`?","To manage the creation of Pods.","To ensure that `Endpoints` objects are updated with the correct IP addresses of healthy Pods for Services.","To schedule Pods onto nodes.","To manage network policies.","To handle API authentication.","B","The `endpoint-controller` (part of the controller manager) watches for Services and Pods and ensures that `Endpoints` objects (which list the IPs and ports of Pods backing a Service) are kept up-to-date.","Kubernetes Fundamentals","Kubernetes Architecture"
"211","What is the main challenge `Horizontal Pod Autoscaler` (HPA) addresses regarding resource allocation?","Over-provisioning or under-provisioning of Pod replicas based on fluctuating load.","Automatically adjusting the CPU and memory requests for existing Pods.","Determining which nodes are available for scheduling.","Managing persistent storage for stateful applications.","Securing network communication between Pods.","A","HPA dynamically adjusts the number of Pod replicas based on observed metrics (like CPU utilization or custom metrics), ensuring that the application scales to meet demand without constant manual intervention or wasted resources.","Cloud Native Architecture","Autoscaling"
"212","What does the `IngressClass` resource in Kubernetes primarily define?","The type of external load balancer to use for an Ingress.","A way to describe the capabilities of an Ingress Controller and to bind Ingress resources to a specific controller implementation.","The set of hostnames an Ingress can manage.","The network policies applied to an Ingress.","The maximum number of Ingress rules allowed.","B","`IngressClass` allows you to define different types of Ingress Controllers and configure them, enabling multiple Ingress Controller implementations in a single cluster and binding Ingress resources to specific ones.","Kubernetes Fundamentals","Kubernetes Resources"
"213","What is the primary benefit of `Infrastructure as Code` (IaC) in a cloud native environment?","It enables manual configuration of infrastructure components.","It provides a graphical user interface for managing infrastructure.","It allows infrastructure to be provisioned, managed, and version-controlled using code, promoting consistency and repeatability.","It reduces the need for any kind of infrastructure.","It only applies to virtual machines, not containers.","C","IaC manages and provisions infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. This leads to consistency, repeatability, and versioning.","Cloud Native Architecture","Cloud Native Principles"
"214","Which component is typically responsible for routing external HTTP/S traffic to the correct Service within a Kubernetes cluster based on rules defined in an Ingress resource?","kube-proxy","kube-scheduler","Ingress Controller","kubelet","CoreDNS","C","The Ingress Controller (e.g., Nginx Ingress Controller, Traefik, ALB Ingress Controller) is a specialized load balancer that implements the rules defined by Ingress resources to route external HTTP/S traffic.","Container Orchestration","Networking"
"215","What is the main advantage of `Prometheus`'s pull-based metric collection model?","It requires applications to constantly push metrics, increasing network load.","It simplifies debugging by having the monitoring system actively scrape known endpoints, reducing complexity for application developers.","It can only collect metrics from static, unchanging targets.","It is primarily designed for log aggregation.","It automatically discovers all applications without any configuration.","B","Prometheus's pull model simplifies target management and allows for easy debugging. The Prometheus server actively scrapes metrics from configured endpoints, reducing the complexity of instrumentation for applications.","Cloud Native Observability","Prometheus"
"216","What is `container image signing` primarily intended to achieve in a secure software supply chain?","To reduce the size of container images.","To compress container images for faster download.","To cryptographically verify the authenticity and integrity of container images, ensuring they come from a trusted source and haven't been tampered with.","To encrypt the contents of container images.","To provide a unique identifier for each container image.","C","Container image signing uses digital signatures to verify that an image was built and published by a trusted entity and has not been altered since it was signed, enhancing supply chain security.","Cloud Native Application Delivery","Security"
"217","Which Kubernetes object is used to define custom, cluster-wide configurations that apply to multiple Pods, often used for injecting sidecars or enforcing policies?","ConfigMap","Secret","CustomResourceDefinition (CRD)","PodTemplate","MutatingAdmissionWebhook","C","A `CustomResourceDefinition` (CRD) allows you to define a new kind of resource that extends the Kubernetes API, which can then be used to create custom controllers (Operators) to manage instances of that resource.","Kubernetes Fundamentals","Kubernetes API"
"218","What is the primary role of the `Service` object's `selector` field?","To select which nodes the Service should run on.","To select the Pods that the Service will route traffic to, based on their labels.","To select which external IP address the Service should use.","To select which namespaces the Service applies to.","To select the container image for the Service.","B","The `selector` field in a Service definition identifies the set of Pods that the Service should route traffic to. Pods matching the selector's labels become endpoints for the Service.","Kubernetes Fundamentals","Kubernetes Resources"
"219","What is the main challenge with `HostAliases` in a Pod definition?","They provide insecure DNS resolution.","They are static and require Pod restarts for changes, making them unsuitable for dynamic environments.","They can conflict with `CoreDNS`.","They cannot be used for external hostnames.","They require complex network configurations.","B","`HostAliases` provide static entries to a Pod's `/etc/hosts` file. Since they are part of the Pod's immutable definition, any change requires recreating the Pod, limiting their use in dynamic scenarios.","Kubernetes Fundamentals","Networking"
"220","Which Kubernetes resource allows you to define policies for Pods that should not be disrupted (evicted) during voluntary node operations?","ResourceQuota","LimitRange","PodDisruptionBudget","HorizontalPodAutoscaler","VerticalPodAutoscaler","C","A `PodDisruptionBudget` (PDB) defines the minimum number or percentage of Pods of a given application that must be available during voluntary disruptions, protecting against service outages during maintenance.","Container Orchestration","Availability"
"221","What is the primary benefit of `Microservices Architecture` in cloud native application development?","It simplifies the development of monolithic applications.","It reduces the overall number of services in an application.","It enables independent development, deployment, and scaling of smaller, self-contained services, leading to greater agility and resilience.","It eliminates the need for inter-service communication.","It ensures all services share a single database.","C","Microservices break down large applications into small, independent services that communicate over APIs. This allows teams to develop, deploy, and scale services independently, accelerating development and improving fault isolation.","Cloud Native Architecture","Microservices"
"222","Which tool is primarily used for log aggregation and analysis in a Kubernetes environment?","Prometheus","Grafana","Fluentd/Fluent Bit","Alertmanager","Kube-state-metrics","C","Fluentd and Fluent Bit are popular open-source data collectors used for log aggregation, collecting logs from various sources (including Kubernetes Pods) and forwarding them to centralized logging systems.","Cloud Native Observability","Telemetry & Observability"
"223","What is the primary purpose of `Kubernetes Admission Controllers`?","To route network traffic between Pods.","To enforce policies and validate, mutate, or reject API requests before they are persisted in etcd.","To schedule Pods onto nodes.","To manage persistent storage volumes.","To encrypt communication between control plane components.","B","Admission controllers are plugins that intercept requests to the Kubernetes API server after authentication and authorization but before persistence. They can validate the request, mutate it, or deny it entirely based on defined policies.","Kubernetes Fundamentals","Kubernetes API"
"224","What is the primary role of the `Service Mesh Interface` (SMI) in the cloud native ecosystem?","To define standards for container image formats.","To standardize common service mesh features across different implementations, promoting interoperability and reducing vendor lock-in.","To provide a common API for Kubernetes networking.","To manage persistent storage for stateful applications.","To define custom resource definitions for applications.","B","SMI provides a set of common, portable APIs that enable developers and operators to interact with various service mesh technologies in a standardized way, allowing for easier adoption and switching between meshes.","Container Orchestration","Service Mesh"
"225","What is the primary security benefit of using a `network policy` for egress traffic in Kubernetes?","It prevents unauthorized inbound connections to Pods.","It controls the outbound network connections that a Pod is allowed to make to other Pods or external endpoints.","It encrypts all outbound traffic from the Pod.","It reduces the network latency for outbound connections.","It allows all outbound connections by default.","B","Egress network policies define which outbound connections a Pod is permitted to make, limiting the blast radius of a compromised Pod by preventing it from reaching unauthorized internal or external resources.","Container Orchestration","Security"
"226","What is the primary goal of `Continuous Integration` (CI) in a CI/CD pipeline?","To deploy code directly to production.","To ensure that code changes from multiple developers are integrated frequently into a shared repository and automatically tested to detect integration issues early.","To manually test all application features.","To manage infrastructure provisioning.","To generate release notes for software versions.","B","CI involves frequent integration of code changes into a central repository, followed by automated builds and tests, to quickly identify and fix integration problems.","Cloud Native Application Delivery","CI/CD"
"227","What is the role of `labels` and `selectors` in Kubernetes?","To define network routes between clusters.","To categorize and group Kubernetes objects (labels) and to specify which objects a controller or service should operate on (selectors).","To manage user authentication and authorization.","To store sensitive data securely.","To assign IP addresses to Pods.","B","Labels are key-value pairs attached to objects, used to identify their characteristics. Selectors are used by controllers (like Deployments, Services) to find and manage objects with specific labels.","Kubernetes Fundamentals","Kubernetes Resources"
"228","When designing a cloud native application, what is the primary benefit of designing services to be `stateless`?","They require persistent storage on the node.","They are easier to scale horizontally, recover from failures, and can be deployed more flexibly as they don't depend on local data.","They improve network performance dramatically.","They are harder to test in isolation.","They consume more CPU and memory resources.","B","Stateless services do not store session or application data locally. This makes them highly scalable (just add more instances), resilient (any instance can serve any request, and failure of one doesn't lose data), and easier to deploy.","Cloud Native Architecture","Design Principles"
"229","What is the primary purpose of `kube-scheduler`'s `taints` and `tolerations`?","To define resource limits for Pods.","To prevent Pods from being scheduled on (taints) or allow Pods to be scheduled on (tolerations) nodes with specific characteristics or issues.","To prioritize scheduling of critical Pods.","To ensure Pods are evenly distributed across nodes.","To manage network policies for nodes.","B","Taints are properties on nodes that repel Pods unless the Pod has a matching toleration, allowing for dedicating nodes or isolating nodes with issues.","Kubernetes Fundamentals","Scheduling"
"230","What is the role of `Container Storage Interface` (CSI) in Kubernetes?","To define the networking model for containers.","To provide a standardized interface for container orchestrators to interact with various storage systems.","To manage container images in a registry.","To encrypt data within containers.","To perform health checks on storage devices.","B","CSI is a standard for exposing arbitrary block and file storage systems to containerized workloads on orchestrators like Kubernetes. It allows third-party storage providers to develop plugins that can be deployed independently.","Container Orchestration","Storage"
"231","Which Kubernetes object defines a logical set of Pods and a policy to access them, but does not create or manage the Pods themselves?","Pod","Deployment","Service","ReplicaSet","DaemonSet","C","A Service abstracts away the underlying Pods and provides a stable network endpoint. It selects Pods based on labels but does not control their lifecycle.","Kubernetes Fundamentals","Kubernetes Resources"
"232","What is the primary function of `Prometheus`'s `node_exporter`?","To collect application-specific metrics.","To expose hardware and OS metrics from nodes (CPU, memory, disk I/O, network I/O) for Prometheus to scrape.","To aggregate logs from all nodes.","To send alerts based on node health.","To manage container runtimes on nodes.","B","The `node_exporter` is a common Prometheus exporter that runs on each node and exposes a wide range of operating system and hardware-level metrics.","Cloud Native Observability","Prometheus"
"233","What is the primary benefit of `Ephemeral Volumes` (e.g., `emptyDir` or `CSI ephemeral volumes`)?","They provide long-term, persistent storage for stateful applications.","They are suitable for temporary data that needs to be shared between containers within a Pod or between Pod restarts, but is not persistent beyond the Pod's lifecycle.","They are encrypted by default.","They reduce the overall storage consumption of the cluster.","They can be dynamically resized by applications.","B","Ephemeral volumes provide short-lived storage that lasts only as long as the Pod (or the specific container that uses CSI ephemeral volumes), ideal for temporary data or cache.","Kubernetes Fundamentals","Storage"
"234","What is the primary purpose of a `Horizontal Pod Autoscaler` (HPA) using `resource metrics` (e.g., CPU, Memory)?","To adjust the resource requests and limits of existing Pods.","To scale the number of Pod replicas up or down based on the Pods' observed resource utilization.","To add or remove nodes from the cluster.","To manage the number of persistent volumes.","To update container images automatically.","B","HPA with resource metrics scales the number of Pods based on the CPU or memory utilization observed from the Pods themselves, ensuring workloads meet demand.","Cloud Native Architecture","Autoscaling"
"235","What is the main challenge `Service Mesh` addresses regarding inter-service communication compared to traditional methods?","Simplifying application code by offloading concerns like routing, security, and observability from the application layer to the infrastructure layer.","Reducing the number of microservices required.","Eliminating the need for any network configuration.","Providing persistent storage for all services.","Automating database migrations.","A","A service mesh abstracts common cross-cutting concerns (traffic management, resiliency, security, observability) from application code, allowing developers to focus on business logic.","Container Orchestration","Service Mesh"
"236","What is the primary benefit of using `Readiness Gates` in Kubernetes?","To control the order of container startup within a Pod.","To allow external feedback (e.g., from a service mesh or external health check system) to influence a Pod's readiness status, preventing traffic from being sent to unready Pods.","To ensure Pods are always scheduled on specific nodes.","To manage persistent storage for stateful applications.","To encrypt inter-Pod communication.","B","Readiness gates allow external controllers or systems (like a service mesh's health check or a custom controller) to add custom conditions to a Pod's readiness state, giving them influence over when a Pod is considered ready to receive traffic.","Kubernetes Fundamentals","Health Checks"
"237","What is the primary role of a `Kubernetes Federation` (now largely superseded by multi-cluster tools)?","To manage a single, large Kubernetes cluster.","To manage multiple Kubernetes clusters as a single logical unit, allowing for global load balancing and cross-cluster resource synchronization.","To replace the Kubernetes API server.","To provide persistent storage across multiple clouds.","To automate container image builds across different regions.","B","Kubernetes Federation (v1) aimed to manage multiple Kubernetes clusters from a single control plane, enabling features like cross-cluster service discovery and workload distribution. While v1 is deprecated, the concept is relevant to multi-cluster management.","Container Orchestration","Multi-cluster"
"238","What is the primary purpose of `kube-scheduler`'s `tolerations`?","To add specific labels to nodes.","To define properties that allow Pods to be scheduled on nodes that have matching taints, overriding the default repulsion.","To limit the resource consumption of Pods.","To provide stable network identities for Pods.","To manage external traffic to the cluster.","B","Tolerations are applied to Pods and allow (but do not guarantee) the Pod to be scheduled on nodes that have matching taints. This is often used with taints to dedicate nodes or manage node conditions.","Kubernetes Fundamentals","Scheduling"
"239","Which cloud native principle advocates for building services as independent, self-contained units that can be developed, deployed, and scaled independently?","Monolithic Design","Serverless Computing","Microservices","Big Data","Batch Processing","C","Microservices architecture breaks down applications into loosely coupled, independently deployable services, which is a core cloud native principle for agility and scalability.","Cloud Native Architecture","Cloud Native Principles"
"240","What is the main challenge with `Static Provisioning` of PersistentVolumes (PVs) compared to `Dynamic Provisioning`?","It requires more manual intervention from administrators to create PVs for each PVC request.","It is more flexible and automated.","It is less secure for sensitive data.","It does not support different storage types.","It results in higher storage costs.","A","Static provisioning requires an administrator to pre-create PVs. Dynamic provisioning, enabled by `StorageClass`, automates the creation of PVs based on PVC requests, making storage management more efficient for users.","Container Orchestration","Storage"
"241","What is the primary benefit of using `Service Mesh` in a cloud native application?","It simplifies the deployment of applications.","It provides a unified way to manage service-to-service communication, including traffic routing, security, and observability, without modifying application code.","It reduces the number of microservices required.","It eliminates the need for any network configuration.","It provides persistent storage for all services.","B","A service mesh abstracts common cross-cutting concerns (traffic management, security, observability) from application code, allowing developers to focus on business logic while the mesh handles inter-service communication.","Container Orchestration","Service Mesh"
"242","What is the primary purpose of `Pod Security Standards` (PSS) in Kubernetes?","To define the resource limits for Pods.","To enforce security best practices for Pods, such as requiring non-root users, restricting host access, and controlling capabilities.","To manage network policies for Pods.","To provide a web UI for cluster management.","To schedule Pods onto nodes.","B","Pod Security Standards (PSS) provide a set of predefined security profiles that can be applied to Pods to enforce security best practices, helping to secure the cluster against common vulnerabilities.","Container Orchestration","Security"
"243","What is the primary benefit of using `Kubernetes Custom Resource Definitions` (CRDs)?","They allow you to define new types of resources that extend the Kubernetes API, enabling custom controllers (Operators) to manage complex applications and workflows.","They provide a way to manage persistent storage in Kubernetes.","They are used for network routing between Pods.","They simplify the deployment of applications.","They are only used for logging purposes.","A","CRDs allow users to create and manage their own resource types in Kubernetes, enabling the development of custom controllers (Operators) that can automate complex application management tasks.","Kubernetes Fundamentals","Kubernetes API"
"244","What is the primary role of `kube-proxy` in a Kubernetes cluster with `iptables` mode?","To manage the lifecycle of Pods.","To provide a web UI for cluster management.","To implement network rules that route traffic to the correct Pods based on Service definitions, using iptables to handle load balancing and service discovery.","To monitor the health of nodes.","To manage persistent storage volumes.","C","In `iptables` mode, `kube-proxy` configures iptables rules to direct traffic destined for a Service to one of the Pods backing that Service, enabling load balancing and service discovery within the cluster.","Kubernetes Fundamentals","Networking"
"60","Youâ€™ve been asked to implement automatic scaling (depending on the load) for an application running in Kubernetes. Which of the following tools will be helpful?","CA","Deployment Autoscaler (DA)","Horizontal Node Autoscaler (HNA)","HPA","","D","HPA (Horizontal Pod Autoscaler) dynamically adjusts the number of pods in response to resource usage, ensuring optimal performance and cost efficiency.","Kubernetes Operations","Autoscaling"
"61","A company is looking to hire a professional who understands the entire application lifecycle and makes security an essential part of it. Which of the following job roles should the company be looking for?","System Administrator","DevSecOps Engineer","Cloud Solution Architect","Data Scientist","","B","A DevSecOps Engineer integrates security into every phase of development, ensuring secure, compliant, and resilient applications.","DevSecOps","Security Integration"
"62","Why are Namespaced containers considered less secure?","They use old kernel features","They need Kubernetes to run","They share a host kernel","They share a host network","","C","Sharing the host kernel exposes containers to potential privilege escalation and kernel-level vulnerabilities.","Container Security","Isolation"
"63","How are Cloud Engineers different from DevOps Engineers?","DevOps Engineers know nothing about the cloud","Cloud Engineers have a deeper knowledge of cloud services","DevOps Engineers often have a broader skill set","DevOps Engineers need to do on-call duty, while Cloud Engineers donâ€™t","","B;C","Cloud Engineers specialize in cloud platforms, while DevOps Engineers focus on automation, CI/CD, and infrastructure as code.","Roles & Responsibilities","Cloud vs DevOps"
"64","Which component does the service mesh data plane include?","Lightweight web server","Lightweight load balancer","Lightweight network proxy","Lightweight network firewall","","C","The data plane uses lightweight network proxies to manage, secure, and observe service-to-service communication.","Service Mesh","Data Plane"
"65","What are secondary containers running in pod called?","Flatcars","Sidecars","Podcars","Helpcars","","B","Sidecars extend the main container's functionality, enabling modular and reusable patterns within pods.","Kubernetes Patterns","Pod Design"
"66","Several departments have requested a partition with their own users and quotas on the corporate Kubernetes cluster. Which of the following can help?","Namespaced runtime","Shared runtime","Pod quota policy","Kubernetes namespaces","","D","Namespaces provide logical isolation and resource quotas, supporting multi-tenancy in Kubernetes.","Cluster Management","Multi-tenancy"
"67","Containers running in one pod share which of the following options?","Name","Storage","Networking","Memory","","B;C","Containers in a pod share storage volumes and network namespace, enabling efficient communication and data sharing.","Pod Architecture","Resource Sharing"
"68","Which of the following is not the Kubernetes AutoScaling Strategy?","Horizontal Pod Autoscaler","Cluster Autoscaler","Vertical Pod Autoscaler","Load Balancing AutoScaler","","D","Load Balancing AutoScaler is not a Kubernetes scaling strategy; the others are official autoscaling mechanisms.","Kubernetes Concepts","Autoscaling"
"69","In distributed system tracing, is the term used to refer to a request as it passes through a single component of the distributed system?","Log","Span","Trace","Bucket","","B","A span represents a single operation or request as it moves through a component, helping track performance and bottlenecks.","Observability","Distributed Tracing"